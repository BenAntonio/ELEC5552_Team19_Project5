
CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000892c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b0c  08008b0c  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b14  08008b14  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          00001c30  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001dc0  20001dc0  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd5c  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039f7  00000000  00000000  0003bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003f918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a0  00000000  00000000  00040d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ad0  00000000  00000000  00041fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017906  00000000  00000000  00066ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1188  00000000  00000000  0007e3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014f53e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054ac  00000000  00000000  0014f594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a9c 	.word	0x08008a9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08008a9c 	.word	0x08008a9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <CSselect>:

#define NRF24_CSN_PORT	GPIOE
#define NRF24_CSN_PIN	GPIO_PIN_15 // Chip Select Pin

void CSselect (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <CSselect+0x14>)
 80004cc:	f001 ff78 	bl	80023c0 <HAL_GPIO_WritePin>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000

080004d8 <CSunselect>:

void CSunselect (void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e2:	4802      	ldr	r0, [pc, #8]	; (80004ec <CSunselect+0x14>)
 80004e4:	f001 ff6c 	bl	80023c0 <HAL_GPIO_WritePin>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021000 	.word	0x40021000

080004f0 <CEenable>:

void CEenable (void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <CEenable+0x14>)
 80004fc:	f001 ff60 	bl	80023c0 <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020400 	.word	0x40020400

08000508 <CEdisable>:

void CEdisable (void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000512:	4802      	ldr	r0, [pc, #8]	; (800051c <CEdisable+0x14>)
 8000514:	f001 ff54 	bl	80023c0 <HAL_GPIO_WritePin>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40020400 	.word	0x40020400

08000520 <nrf24WrReg>:

void nrf24WrReg (uint8_t Reg, uint8_t Data) // Write a data byte to the register
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg| (1<<5); // Write a 1 in the 5th position of the buffer, as this is required when sending a register address
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	b2db      	uxtb	r3, r3
 8000538:	733b      	strb	r3, [r7, #12]
	buf[1] = Data; // Data byte
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin to low to select a device
	CSselect();
 800053e:	f7ff ffbf 	bl	80004c0 <CSselect>

	HAL_SPI_Transmit(NRF_SPI, buf, 2, 1000); // Transmit message to SPI
 8000542:	f107 010c 	add.w	r1, r7, #12
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	2202      	movs	r2, #2
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <nrf24WrReg+0x40>)
 800054e:	f003 fdc0 	bl	80040d2 <HAL_SPI_Transmit>

	// Pull the CS Pin to HIGH to release the device
	CSunselect();
 8000552:	f7ff ffc1 	bl	80004d8 <CSunselect>
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200003e0 	.word	0x200003e0

08000564 <nrf24WrRegMulti>:

void nrf24WrRegMulti (uint8_t Reg, uint8_t *data, int size) // Write multiple data bytes at once
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg| (1<<5); // Write a 1 in the 5th position of the buffer, as this is required when sending a register address
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	f043 0320 	orr.w	r3, r3, #32
 8000578:	b2db      	uxtb	r3, r3
 800057a:	753b      	strb	r3, [r7, #20]
	// buf[1] = data; // Data byte

	// Pull the CS Pin to LOW to select a device
	CSselect();
 800057c:	f7ff ffa0 	bl	80004c0 <CSselect>

	HAL_SPI_Transmit(NRF_SPI, buf, 1, 100); // Transmit message to SPI
 8000580:	f107 0114 	add.w	r1, r7, #20
 8000584:	2364      	movs	r3, #100	; 0x64
 8000586:	2201      	movs	r2, #1
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <nrf24WrRegMulti+0x48>)
 800058a:	f003 fda2 	bl	80040d2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF_SPI, data, size, 1000);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	b29a      	uxth	r2, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	68b9      	ldr	r1, [r7, #8]
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <nrf24WrRegMulti+0x48>)
 800059a:	f003 fd9a 	bl	80040d2 <HAL_SPI_Transmit>

	// Pull the CS Pin to HIGH to release the device
	CSunselect();
 800059e:	f7ff ff9b 	bl	80004d8 <CSunselect>
}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200003e0 	.word	0x200003e0

080005b0 <nrf24RdReg>:

uint8_t nrf24RdReg (uint8_t Reg) // Read a data byte from the register
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin to LOW to select a device
	CSselect();
 80005be:	f7ff ff7f 	bl	80004c0 <CSselect>

	HAL_SPI_Transmit(NRF_SPI, &Reg, 1, 100); // Send register address to where the data is read from
 80005c2:	1df9      	adds	r1, r7, #7
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	2201      	movs	r2, #1
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <nrf24RdReg+0x3c>)
 80005ca:	f003 fd82 	bl	80040d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF_SPI, &data, 1, 100); // Read 1 byte of data
 80005ce:	f107 010f 	add.w	r1, r7, #15
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2201      	movs	r2, #1
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <nrf24RdReg+0x3c>)
 80005d8:	f003 feb7 	bl	800434a <HAL_SPI_Receive>

	// Pull the CS Pin to HIGH to release the device
	CSunselect();
 80005dc:	f7ff ff7c 	bl	80004d8 <CSunselect>

	return data;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200003e0 	.word	0x200003e0

080005f0 <nrfsendCmd>:

}


void nrfsendCmd (uint8_t command) //send standalone commands that don't need a register
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	CSselect(); //select the device
 80005fa:	f7ff ff61 	bl	80004c0 <CSselect>

	HAL_SPI_Transmit(NRF_SPI, &command, 1, 100);
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	2201      	movs	r2, #1
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <nrfsendCmd+0x28>)
 8000606:	f003 fd64 	bl	80040d2 <HAL_SPI_Transmit>

	CSunselect(); //release the device
 800060a:	f7ff ff65 	bl	80004d8 <CSunselect>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200003e0 	.word	0x200003e0

0800061c <nrfInit>:


void nrfInit (void) // Send command to the NRF
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	// disable chip before device configuration
	CEdisable();
 8000620:	f7ff ff72 	bl	8000508 <CEdisable>

	nrf24WrReg(CONFIG, 0); // Write 0 to config address to be configured later
 8000624:	2100      	movs	r1, #0
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff7a 	bl	8000520 <nrf24WrReg>
	nrf24WrReg(EN_AA, 0); // Disable auto acknowledgement
 800062c:	2100      	movs	r1, #0
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff ff76 	bl	8000520 <nrf24WrReg>
	nrf24WrReg(EN_RXADDR, 0); // Disable data pipe
 8000634:	2100      	movs	r1, #0
 8000636:	2002      	movs	r0, #2
 8000638:	f7ff ff72 	bl	8000520 <nrf24WrReg>
	nrf24WrReg(SETUP_AW, 0x03); // RX/TX address should have 5 bytes
 800063c:	2103      	movs	r1, #3
 800063e:	2003      	movs	r0, #3
 8000640:	f7ff ff6e 	bl	8000520 <nrf24WrReg>
	nrf24WrReg(SETUP_RETR, 0); // Disable retransmission
 8000644:	2100      	movs	r1, #0
 8000646:	2004      	movs	r0, #4
 8000648:	f7ff ff6a 	bl	8000520 <nrf24WrReg>
	nrf24WrReg(RF_CH, 0); // Write 0 as this is setup during send or receive
 800064c:	2100      	movs	r1, #0
 800064e:	2005      	movs	r0, #5
 8000650:	f7ff ff66 	bl	8000520 <nrf24WrReg>
	nrf24WrReg(RF_SETUP, 0x0E); // Power is 0db, data rate is 2mbps
 8000654:	210e      	movs	r1, #14
 8000656:	2006      	movs	r0, #6
 8000658:	f7ff ff62 	bl	8000520 <nrf24WrReg>

	// Enable chip after configuration
	CEenable();
 800065c:	f7ff ff48 	bl	80004f0 <CEenable>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <nrfTxMode>:

// Function for configuring Tx mode
void nrfTxMode (uint8_t *Address, uint8_t channel)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	CEdisable(); // disable chip for config
 8000670:	f7ff ff4a 	bl	8000508 <CEdisable>

	nrf24WrReg(RF_CH, channel); //channel select
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	4619      	mov	r1, r3
 8000678:	2005      	movs	r0, #5
 800067a:	f7ff ff51 	bl	8000520 <nrf24WrReg>

	nrf24WrRegMulti(TX_ADDR, Address, 5); //write address to TX_ADDR
 800067e:	2205      	movs	r2, #5
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	2010      	movs	r0, #16
 8000684:	f7ff ff6e 	bl	8000564 <nrf24WrRegMulti>

	// turn on the device
	uint8_t config = nrf24RdReg(CONFIG);
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff ff91 	bl	80005b0 <nrf24RdReg>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
	config  = config | (1<<1);
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	73fb      	strb	r3, [r7, #15]
	nrf24WrReg(CONFIG, config);
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4619      	mov	r1, r3
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff3e 	bl	8000520 <nrf24WrReg>

	CEenable(); //re-enable the chip
 80006a4:	f7ff ff24 	bl	80004f0 <CEenable>

}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <nrfRxMode>:

	return 0;
}

void nrfRxMode (uint8_t *Address, uint8_t channel)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]

	CEdisable();// disable the chip for config
 80006bc:	f7ff ff24 	bl	8000508 <CEdisable>

	nrf24WrReg(RF_CH, channel);  // select the channel
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	4619      	mov	r1, r3
 80006c4:	2005      	movs	r0, #5
 80006c6:	f7ff ff2b 	bl	8000520 <nrf24WrReg>

	/*  NOTE: RF data pipe 1 is selected by default.
	 *  If other pipes are required, edit RX_ADDR_PX values accordingly.
	 */
	uint8_t EnRxAddr = nrf24RdReg(EN_RXADDR);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f7ff ff70 	bl	80005b0 <nrf24RdReg>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]
	EnRxAddr = EnRxAddr | (1<<1);
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	f043 0302 	orr.w	r3, r3, #2
 80006da:	73fb      	strb	r3, [r7, #15]
	nrf24WrReg(EN_RXADDR, EnRxAddr);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4619      	mov	r1, r3
 80006e0:	2002      	movs	r0, #2
 80006e2:	f7ff ff1d 	bl	8000520 <nrf24WrReg>

	nrf24WrRegMulti(RX_ADDR_P1, Address, 5);  // Write the pipe address
 80006e6:	2205      	movs	r2, #5
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	200b      	movs	r0, #11
 80006ec:	f7ff ff3a 	bl	8000564 <nrf24WrRegMulti>

	nrf24WrReg (RX_PW_P1, 32);   // 32 bit payload size for pipe 1
 80006f0:	2120      	movs	r1, #32
 80006f2:	2012      	movs	r0, #18
 80006f4:	f7ff ff14 	bl	8000520 <nrf24WrReg>


	// power up the device in Rx mode
	uint8_t config = nrf24RdReg(CONFIG);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff ff59 	bl	80005b0 <nrf24RdReg>
 80006fe:	4603      	mov	r3, r0
 8000700:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	f043 0303 	orr.w	r3, r3, #3
 8000708:	73bb      	strb	r3, [r7, #14]
	nrf24WrReg (CONFIG, config);
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	4619      	mov	r1, r3
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ff06 	bl	8000520 <nrf24WrReg>


	CEenable(); //re-enable the chip
 8000714:	f7ff feec 	bl	80004f0 <CEenable>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <dataAvailability>:

uint8_t dataAvailability (int pipeNumber)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	uint8_t Status = nrf24RdReg(STATUS); // Read status register
 8000728:	2007      	movs	r0, #7
 800072a:	f7ff ff41 	bl	80005b0 <nrf24RdReg>
 800072e:	4603      	mov	r3, r0
 8000730:	73fb      	strb	r3, [r7, #15]

	if ((Status&(1<<6))&&(Status&(pipeNumber<<1))) // Check to see if Rx data is ready
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00b      	beq.n	8000754 <dataAvailability+0x34>
 800073c:	7bfa      	ldrb	r2, [r7, #15]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4013      	ands	r3, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <dataAvailability+0x34>
	{

		nrf24WrReg(STATUS, (1<<6));
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	2007      	movs	r0, #7
 800074c:	f7ff fee8 	bl	8000520 <nrf24WrReg>

		return 1;
 8000750:	2301      	movs	r3, #1
 8000752:	e000      	b.n	8000756 <dataAvailability+0x36>
	}

	return 0;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <nrfReceive>:

void nrfReceive (uint8_t *data)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint8_t commandsend = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]

	// select the device
	CSselect();
 800076c:	f7ff fea8 	bl	80004c0 <CSselect>

	// payload command
	commandsend = R_RX_PAYLOAD;
 8000770:	2361      	movs	r3, #97	; 0x61
 8000772:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF_SPI, &commandsend, 1, 100);
 8000774:	f107 010f 	add.w	r1, r7, #15
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	2201      	movs	r2, #1
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <nrfReceive+0x50>)
 800077e:	f003 fca8 	bl	80040d2 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF_SPI, data, 32, 1000);
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	2220      	movs	r2, #32
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <nrfReceive+0x50>)
 800078c:	f003 fddd 	bl	800434a <HAL_SPI_Receive>

	// Unselect the device
	CSunselect();
 8000790:	f7ff fea2 	bl	80004d8 <CSunselect>

	HAL_Delay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fcdf 	bl	8001158 <HAL_Delay>

	commandsend = FLUSH_RX;
 800079a:	23e2      	movs	r3, #226	; 0xe2
 800079c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(commandsend);
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff25 	bl	80005f0 <nrfsendCmd>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200003e0 	.word	0x200003e0

080007b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8]; //RF and CAN transmit data array
uint8_t RxData[8]; //RF and CAN receive data array
/* PROJECT CODE VARIABLE AND DATA ARRAY DEFINITION END */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData); // Reads the data received in CAN FIFO
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 ffe7 	bl	8001796 <HAL_CAN_GetRxMessage>

	/* PROJECT CODE CAN DATA PROCESSING BEGIN */
	if (RxHeader.DLC == 2) // EXAMPLE CODE: Change value if DLC also changes
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d102      	bne.n	80007d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck = 1;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
	}
	/* PROJECT CODE CAN DATA PROCESSING END */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000438 	.word	0x20000438
 80007e4:	200004c8 	.word	0x200004c8
 80007e8:	200001ac 	.word	0x200001ac

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fc3f 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f89f 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 f9dd 	bl	8000bb8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007fe:	f000 f905 	bl	8000a0c <MX_CAN1_Init>
  MX_SPI1_Init();
 8000802:	f000 f957 	bl	8000ab4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000806:	f007 fc29 	bl	800805c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800080a:	f000 f989 	bl	8000b20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  nrfInit(); // Initialise NRF24L01
 800080e:	f7ff ff05 	bl	800061c <nrfInit>

  /* PROJECT CODE RF CHANNEL BEGIN */
  nrfTxMode(TxAddress,0x0A); // Edit second argument to change channel for RF transmit
 8000812:	210a      	movs	r1, #10
 8000814:	483e      	ldr	r0, [pc, #248]	; (8000910 <main+0x124>)
 8000816:	f7ff ff25 	bl	8000664 <nrfTxMode>
  nrfRxMode(RxAddress, 0x0A); // Edit second argument to change channel for RF receive
 800081a:	210a      	movs	r1, #10
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <main+0x128>)
 800081e:	f7ff ff47 	bl	80006b0 <nrfRxMode>
  /* PROJECT CODE RF CHANNEL END */

  HAL_CAN_Start(&hcan1);
 8000822:	483d      	ldr	r0, [pc, #244]	; (8000918 <main+0x12c>)
 8000824:	f000 fe98 	bl	8001558 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Activate notification if data
 8000828:	2102      	movs	r1, #2
 800082a:	483b      	ldr	r0, [pc, #236]	; (8000918 <main+0x12c>)
 800082c:	f001 f8c5 	bl	80019ba <HAL_CAN_ActivateNotification>


  /* PROJECT CODE CAN HEADER CONFIGURATION BEGIN */
  TxHeader.DLC = 2; // Edit this value to send up to 8 bytes of data in a CAN message.
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <main+0x130>)
 8000832:	2202      	movs	r2, #2
 8000834:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8000836:	4b39      	ldr	r3, [pc, #228]	; (800091c <main+0x130>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD; // standard CAN frame
 800083c:	4b37      	ldr	r3, [pc, #220]	; (800091c <main+0x130>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <main+0x130>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103; // ID of the sender
 8000848:	4b34      	ldr	r3, [pc, #208]	; (800091c <main+0x130>)
 800084a:	f240 1203 	movw	r2, #259	; 0x103
 800084e:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000850:	4b32      	ldr	r3, [pc, #200]	; (800091c <main+0x130>)
 8000852:	2200      	movs	r2, #0
 8000854:	751a      	strb	r2, [r3, #20]

  	  /* PROJECT CODE DATA FRAME CONTENT BEGIN */
  	  /* The user can define the data for each array position.
  	   * An example below uses 2 bytes to send LED animation data.
  	   */
  TxData[0] = 200;  // EXAMPLE CODE: Delay between LED blinks in milliseconds (ms)
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <main+0x134>)
 8000858:	22c8      	movs	r2, #200	; 0xc8
 800085a:	701a      	strb	r2, [r3, #0]
  TxData[1] = 12; // EXAMPLE CODE: How many times LED blinks
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <main+0x134>)
 800085e:	220c      	movs	r2, #12
 8000860:	705a      	strb	r2, [r3, #1]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOB,LED_OP_Pin,GPIO_PIN_SET); // LED_OP pin is constant HIGH when device is operating as expected
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000868:	482e      	ldr	r0, [pc, #184]	; (8000924 <main+0x138>)
 800086a:	f001 fda9 	bl	80023c0 <HAL_GPIO_WritePin>
	 * to use this device in TRANSMITTER mode, swap code by commenting each line within RF
	 * RECEIVE MODE and uncommenting RF TRANSMIT MODE.
	 */

	/* RF RECEIVER MODE START */
	  if (dataAvailability(1) == 1) // Check to see if RF Rx data is available to read
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff ff56 	bl	8000720 <dataAvailability>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d11d      	bne.n	80008b6 <main+0xca>
	  {
		  nrfReceive(RxData); // Read data to RxData array
 800087a:	482b      	ldr	r0, [pc, #172]	; (8000928 <main+0x13c>)
 800087c:	f7ff ff70 	bl	8000760 <nrfReceive>
		  HAL_GPIO_TogglePin(GPIOB, LED_Rx_Pin); // Flash Rx LED when data is being received
 8000880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000884:	4827      	ldr	r0, [pc, #156]	; (8000924 <main+0x138>)
 8000886:	f001 fdb4 	bl	80023f2 <HAL_GPIO_TogglePin>

		  /* PROJECT CODE RF DATA PROCESSING BEGIN */
		  	  //EXAMPLE CODE: Blink external LED for RxData[1] number of times with RxData[0] delay.
		  	  for (int i=0; i<RxData[1]; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	e00b      	b.n	80008a8 <main+0xbc>
		  	  {
		  		  HAL_GPIO_TogglePin(GPIOE, OUT1_Pin);
 8000890:	2110      	movs	r1, #16
 8000892:	4826      	ldr	r0, [pc, #152]	; (800092c <main+0x140>)
 8000894:	f001 fdad 	bl	80023f2 <HAL_GPIO_TogglePin>
		  		  HAL_Delay(RxData[0]);
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <main+0x13c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fc5b 	bl	8001158 <HAL_Delay>
		  	  for (int i=0; i<RxData[1]; i++)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <main+0x13c>)
 80008aa:	785b      	ldrb	r3, [r3, #1]
 80008ac:	461a      	mov	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4293      	cmp	r3, r2
 80008b2:	dbed      	blt.n	8000890 <main+0xa4>
 80008b4:	e009      	b.n	80008ca <main+0xde>
		  	  }
		  /* PROJECT CODE RF DATA PROCESSING END */
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB,LED_OP_Pin,GPIO_PIN_RESET); // Blink LED_OP to indicate no connection/idle state
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008bc:	4819      	ldr	r0, [pc, #100]	; (8000924 <main+0x138>)
 80008be:	f001 fd7f 	bl	80023c0 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1000); // Wait 1 second before restarting loop
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f000 fc47 	bl	8001158 <HAL_Delay>
	  	  	  	  	   // requires data to be sent after a trigger (button press), remove the delay.

	   RF TRANSMITTER MODE END */


	  if (datacheck) // Checks to see if CAN message has been sent with expected number of bytes
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <main+0x144>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0c7      	beq.n	8000862 <main+0x76>
	  {
		  /* PROJECT CODE RF DATA PROCESSING BEGIN */
		  	  //EXAMPLE CODE: Blink external LED for RxData[1] number of times with RxData[0] delay.
		  	  for (int i=0; i<RxData[1]; i++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	e00b      	b.n	80008f0 <main+0x104>
		  	  {
		  		  HAL_GPIO_TogglePin(GPIOE, OUT1_Pin); //blink LED at output Pin
 80008d8:	2110      	movs	r1, #16
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <main+0x140>)
 80008dc:	f001 fd89 	bl	80023f2 <HAL_GPIO_TogglePin>
		  		  HAL_Delay(RxData[0]);
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <main+0x13c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fc37 	bl	8001158 <HAL_Delay>
		  	  for (int i=0; i<RxData[1]; i++)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <main+0x13c>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	dbed      	blt.n	80008d8 <main+0xec>

		  /* EXAMPLE CODE: With the line of code below enabled, two CAN devices will send
		   * data continuously back and forth. Removing the line will ensure this device
		   * will not transmit a message following a data read.
		   */
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox); // Sends message using header and data array input as defined in fields.
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <main+0x148>)
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <main+0x134>)
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <main+0x130>)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <main+0x12c>)
 8000904:	f000 fe6c 	bl	80015e0 <HAL_CAN_AddTxMessage>
		  datacheck = 0;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <main+0x144>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB,LED_OP_Pin,GPIO_PIN_SET); // LED_OP pin is constant HIGH when device is operating as expected
 800090e:	e7a8      	b.n	8000862 <main+0x76>
 8000910:	20000000 	.word	0x20000000
 8000914:	20000008 	.word	0x20000008
 8000918:	20000488 	.word	0x20000488
 800091c:	200004b0 	.word	0x200004b0
 8000920:	200003d4 	.word	0x200003d4
 8000924:	40020400 	.word	0x40020400
 8000928:	20000438 	.word	0x20000438
 800092c:	40021000 	.word	0x40021000
 8000930:	200001ac 	.word	0x200001ac
 8000934:	200003dc 	.word	0x200003dc

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f008 f8a0 	bl	8008a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <SystemClock_Config+0xcc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <SystemClock_Config+0xd0>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a8:	2308      	movs	r3, #8
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009ac:	23a8      	movs	r3, #168	; 0xa8
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b4:	2307      	movs	r3, #7
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 feb5 	bl	800372c <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c8:	f000 f9e4 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80009d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2105      	movs	r1, #5
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 f916 	bl	8003c1c <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009f6:	f000 f9cd 	bl	8000d94 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3750      	adds	r7, #80	; 0x50
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a14:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_CAN1_Init+0xa4>)
 8000a16:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a30:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a38:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a5e:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000a60:	f000 fb9e 	bl	80011a0 <HAL_CAN_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a6a:	f000 f993 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  /* PROJECT CODE CAN FILTER CONFIGURATION BEGIN */
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10; // Edit to choose which filter bank to use
 8000a72:	230a      	movs	r3, #10
 8000a74:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x446<<5; // Edit to specify the CAN identifier/s permitted
 8000a7a:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000a7e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x446<<5; // Edit to specify the CAN identifier/s permitted
 8000a84:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000a88:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13; // Edit to specify how many filters to assign to CAN1 (master)
 8000a96:	230d      	movs	r3, #13
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  /* PROJECT CODE CAN FILTER CONFIGURATION END */

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <MX_CAN1_Init+0xa0>)
 8000aa0:	f000 fc7a 	bl	8001398 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000488 	.word	0x20000488
 8000ab0:	40006400 	.word	0x40006400

08000ab4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000ae8:	2220      	movs	r2, #32
 8000aea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000b00:	220a      	movs	r2, #10
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_SPI1_Init+0x64>)
 8000b06:	f003 fa5b 	bl	8003fc0 <HAL_SPI_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b10:	f000 f940 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200003e0 	.word	0x200003e0
 8000b1c:	40013000 	.word	0x40013000

08000b20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 646-1;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b46:	f240 2285 	movw	r2, #645	; 0x285
 8000b4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b54:	22fe      	movs	r2, #254	; 0xfe
 8000b56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b64:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b66:	f003 ffd3 	bl	8004b10 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b70:	f000 f910 	bl	8000d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b82:	f004 f814 	bl	8004bae <HAL_TIM_ConfigClockSource>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b8c:	f000 f902 	bl	8000d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b9e:	f004 fa07 	bl	8004fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ba8:	f000 f8f4 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000440 	.word	0x20000440

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4b6a      	ldr	r3, [pc, #424]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a69      	ldr	r2, [pc, #420]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b67      	ldr	r3, [pc, #412]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b63      	ldr	r3, [pc, #396]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a62      	ldr	r2, [pc, #392]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b60      	ldr	r3, [pc, #384]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b5c      	ldr	r3, [pc, #368]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a5b      	ldr	r2, [pc, #364]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a54      	ldr	r2, [pc, #336]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b4e      	ldr	r3, [pc, #312]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a4d      	ldr	r2, [pc, #308]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <MX_GPIO_Init+0x1c4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OUT1_Pin|OUT2_Pin|NRF_IRQ_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f648 0130 	movw	r1, #34864	; 0x8830
 8000c7c:	4840      	ldr	r0, [pc, #256]	; (8000d80 <MX_GPIO_Init+0x1c8>)
 8000c7e:	f001 fb9f 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	483f      	ldr	r0, [pc, #252]	; (8000d84 <MX_GPIO_Init+0x1cc>)
 8000c88:	f001 fb9a 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|LED_OP_Pin|LED_Rx_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 4114 	mov.w	r1, #37888	; 0x9400
 8000c92:	483d      	ldr	r0, [pc, #244]	; (8000d88 <MX_GPIO_Init+0x1d0>)
 8000c94:	f001 fb94 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_FAULT_Pin|LED_Tx_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000c9e:	483b      	ldr	r0, [pc, #236]	; (8000d8c <MX_GPIO_Init+0x1d4>)
 8000ca0:	f001 fb8e 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_GPIO_Port, S_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000caa:	4839      	ldr	r0, [pc, #228]	; (8000d90 <MX_GPIO_Init+0x1d8>)
 8000cac:	f001 fb88 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482f      	ldr	r0, [pc, #188]	; (8000d80 <MX_GPIO_Init+0x1c8>)
 8000cc4:	f001 f9e0 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin NRF_IRQ_Pin PE15 */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|NRF_IRQ_Pin|GPIO_PIN_15;
 8000cc8:	f648 0330 	movw	r3, #34864	; 0x8830
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4827      	ldr	r0, [pc, #156]	; (8000d80 <MX_GPIO_Init+0x1c8>)
 8000ce2:	f001 f9d1 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4822      	ldr	r0, [pc, #136]	; (8000d84 <MX_GPIO_Init+0x1cc>)
 8000cfa:	f001 f9c5 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	481b      	ldr	r0, [pc, #108]	; (8000d84 <MX_GPIO_Init+0x1cc>)
 8000d16:	f001 f9b7 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 LED_OP_Pin LED_Rx_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|LED_OP_Pin|LED_Rx_Pin;
 8000d1a:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <MX_GPIO_Init+0x1d0>)
 8000d34:	f001 f9a8 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_FAULT_Pin LED_Tx_Pin */
  GPIO_InitStruct.Pin = LED_FAULT_Pin|LED_Tx_Pin;
 8000d38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <MX_GPIO_Init+0x1d4>)
 8000d52:	f001 f999 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_Pin */
  GPIO_InitStruct.Pin = S_Pin;
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(S_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <MX_GPIO_Init+0x1d8>)
 8000d70:	f001 f98a 	bl	8002088 <HAL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	40020800 	.word	0x40020800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, LED_OP_Pin,GPIO_PIN_RESET); // Sets LED_OP to LOW if an error has occurred
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <Error_Handler+0x24>)
 8000da4:	f001 fb0c 	bl	80023c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_FAULT_Pin,GPIO_PIN_SET); // Sets LED_FAULT to HIGH if an error has occurred
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <Error_Handler+0x28>)
 8000db0:	f001 fb06 	bl	80023c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LED_OP_Pin,GPIO_PIN_RESET); // Sets LED_OP to LOW if an error has occurred
 8000db4:	e7f2      	b.n	8000d9c <Error_Handler+0x8>
 8000db6:	bf00      	nop
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_CAN_MspInit+0x94>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d133      	bne.n	8000e9a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_CAN_MspInit+0x98>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <HAL_CAN_MspInit+0x9c>)
 8000e86:	f001 f8ff 	bl	8002088 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2014      	movs	r0, #20
 8000e90:	f001 f8c3 	bl	800201a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e94:	2014      	movs	r0, #20
 8000e96:	f001 f8dc 	bl	8002052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40006400 	.word	0x40006400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020c00 	.word	0x40020c00

08000eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_SPI_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12b      	bne.n	8000f2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_SPI_MspInit+0x88>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_SPI_MspInit+0x88>)
 8000edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_SPI_MspInit+0x88>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_SPI_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_SPI_MspInit+0x88>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_SPI_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f0a:	23e0      	movs	r3, #224	; 0xe0
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_SPI_MspInit+0x8c>)
 8000f26:	f001 f8af 	bl	8002088 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40013000 	.word	0x40013000
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f50:	d10d      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_TIM_Base_MspInit+0x3c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_TIM_Base_MspInit+0x3c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_TIM_Base_MspInit+0x3c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fcc:	f000 f8a4 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <CAN1_RX0_IRQHandler+0x10>)
 8000fda:	f000 fd14 	bl	8001a06 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000488 	.word	0x20000488

08000fe8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <OTG_FS_IRQHandler+0x10>)
 8000fee:	f001 fb6a 	bl	80026c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200019b8 	.word	0x200019b8

08000ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <SystemInit+0x20>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <SystemInit+0x20>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001026:	490e      	ldr	r1, [pc, #56]	; (8001060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800103c:	4c0b      	ldr	r4, [pc, #44]	; (800106c <LoopFillZerobss+0x26>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800104a:	f7ff ffd7 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104e:	f007 fcf9 	bl	8008a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001052:	f7ff fbcb 	bl	80007ec <main>
  bx  lr    
 8001056:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001064:	08008b1c 	.word	0x08008b1c
  ldr r2, =_sbss
 8001068:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800106c:	20001dc0 	.word	0x20001dc0

08001070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC_IRQHandler>
	...

08001074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <HAL_Init+0x40>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_Init+0x40>)
 800108a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_Init+0x40>)
 8001096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 ffb1 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	200f      	movs	r0, #15
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff fe8a 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023c00 	.word	0x40023c00

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 ffc9 	bl	800206e <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f000 ff91 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000010 	.word	0x20000010
 8001110:	20000018 	.word	0x20000018
 8001114:	20000014 	.word	0x20000014

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000018 	.word	0x20000018
 800113c:	200004e4 	.word	0x200004e4

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200004e4 	.word	0x200004e4

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117e:	bf00      	nop
 8001180:	f7ff ffde 	bl	8001140 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000018 	.word	0x20000018

080011a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0ed      	b.n	800138e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fe26 	bl	8000e10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0201 	orr.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011d4:	f7ff ffb4 	bl	8001140 <HAL_GetTick>
 80011d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011da:	e012      	b.n	8001202 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011dc:	f7ff ffb0 	bl	8001140 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b0a      	cmp	r3, #10
 80011e8:	d90b      	bls.n	8001202 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2205      	movs	r2, #5
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e0c5      	b.n	800138e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0e5      	beq.n	80011dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0202 	bic.w	r2, r2, #2
 800121e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001220:	f7ff ff8e 	bl	8001140 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001226:	e012      	b.n	800124e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001228:	f7ff ff8a 	bl	8001140 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d90b      	bls.n	800124e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2205      	movs	r2, #5
 8001246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e09f      	b.n	800138e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e5      	bne.n	8001228 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7e1b      	ldrb	r3, [r3, #24]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d108      	bne.n	8001276 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e007      	b.n	8001286 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7e5b      	ldrb	r3, [r3, #25]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d108      	bne.n	80012a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e007      	b.n	80012b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e9b      	ldrb	r3, [r3, #26]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0220 	orr.w	r2, r2, #32
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e007      	b.n	80012da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0220 	bic.w	r2, r2, #32
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7edb      	ldrb	r3, [r3, #27]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0210 	bic.w	r2, r2, #16
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e007      	b.n	8001304 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0210 	orr.w	r2, r2, #16
 8001302:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7f1b      	ldrb	r3, [r3, #28]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0208 	orr.w	r2, r2, #8
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e007      	b.n	800132e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0208 	bic.w	r2, r2, #8
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7f5b      	ldrb	r3, [r3, #29]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0204 	orr.w	r2, r2, #4
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e007      	b.n	8001358 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0204 	bic.w	r2, r2, #4
 8001356:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	ea42 0103 	orr.w	r1, r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013b0:	7cfb      	ldrb	r3, [r7, #19]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d003      	beq.n	80013be <HAL_CAN_ConfigFilter+0x26>
 80013b6:	7cfb      	ldrb	r3, [r7, #19]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	f040 80be 	bne.w	800153a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013be:	4b65      	ldr	r3, [pc, #404]	; (8001554 <HAL_CAN_ConfigFilter+0x1bc>)
 80013c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	431a      	orrs	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	2201      	movs	r2, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	401a      	ands	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d123      	bne.n	8001468 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001442:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3248      	adds	r2, #72	; 0x48
 8001448:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800145c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800145e:	6979      	ldr	r1, [r7, #20]
 8001460:	3348      	adds	r3, #72	; 0x48
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d122      	bne.n	80014b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001490:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3248      	adds	r2, #72	; 0x48
 8001496:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ac:	6979      	ldr	r1, [r7, #20]
 80014ae:	3348      	adds	r3, #72	; 0x48
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	401a      	ands	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014d0:	e007      	b.n	80014e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	401a      	ands	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014fc:	e007      	b.n	800150e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	431a      	orrs	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	431a      	orrs	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800152c:	f023 0201 	bic.w	r2, r3, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e006      	b.n	8001548 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
  }
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40006400 	.word	0x40006400

08001558 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d12e      	bne.n	80015ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff fddc 	bl	8001140 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800158a:	e012      	b.n	80015b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800158c:	f7ff fdd8 	bl	8001140 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b0a      	cmp	r3, #10
 8001598:	d90b      	bls.n	80015b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2205      	movs	r2, #5
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e012      	b.n	80015d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e5      	bne.n	800158c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e006      	b.n	80015d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d003      	beq.n	800160c <HAL_CAN_AddTxMessage+0x2c>
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	2b02      	cmp	r3, #2
 8001608:	f040 80b8 	bne.w	800177c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10a      	bne.n	800162c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800161c:	2b00      	cmp	r3, #0
 800161e:	d105      	bne.n	800162c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80a0 	beq.w	800176c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	0e1b      	lsrs	r3, r3, #24
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d907      	bls.n	800164c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e09e      	b.n	800178a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800164c:	2201      	movs	r2, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	409a      	lsls	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	431a      	orrs	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3318      	adds	r3, #24
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	440b      	add	r3, r1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e00f      	b.n	800169a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001684:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800168e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3318      	adds	r3, #24
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3318      	adds	r3, #24
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	440b      	add	r3, r1
 80016aa:	3304      	adds	r3, #4
 80016ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	7d1b      	ldrb	r3, [r3, #20]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d111      	bne.n	80016da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3318      	adds	r3, #24
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	6811      	ldr	r1, [r2, #0]
 80016ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3318      	adds	r3, #24
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	440b      	add	r3, r1
 80016d6:	3304      	adds	r3, #4
 80016d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3307      	adds	r3, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	061a      	lsls	r2, r3, #24
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3306      	adds	r3, #6
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3305      	adds	r3, #5
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	4313      	orrs	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	3204      	adds	r2, #4
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	4610      	mov	r0, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	6811      	ldr	r1, [r2, #0]
 8001702:	ea43 0200 	orr.w	r2, r3, r0
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001710:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	061a      	lsls	r2, r3, #24
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3302      	adds	r3, #2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4313      	orrs	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4610      	mov	r0, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	6811      	ldr	r1, [r2, #0]
 8001738:	ea43 0200 	orr.w	r2, r3, r0
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	440b      	add	r3, r1
 8001742:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001746:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3318      	adds	r3, #24
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	6811      	ldr	r1, [r2, #0]
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3318      	adds	r3, #24
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	440b      	add	r3, r1
 8001766:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	e00e      	b.n	800178a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e006      	b.n	800178a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001796:	b480      	push	{r7}
 8001798:	b087      	sub	sp, #28
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017aa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d003      	beq.n	80017ba <HAL_CAN_GetRxMessage+0x24>
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	f040 80f3 	bne.w	80019a0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10e      	bne.n	80017de <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0e7      	b.n	80019ae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0d8      	b.n	80019ae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	331b      	adds	r3, #27
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0204 	and.w	r2, r3, #4
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	331b      	adds	r3, #27
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	0d5b      	lsrs	r3, r3, #21
 800182a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e00b      	b.n	800184c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	331b      	adds	r3, #27
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	331b      	adds	r3, #27
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0202 	and.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	331b      	adds	r3, #27
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	3304      	adds	r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 020f 	and.w	r2, r3, #15
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	331b      	adds	r3, #27
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b2da      	uxtb	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	331b      	adds	r3, #27
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	3304      	adds	r3, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0c1b      	lsrs	r3, r3, #16
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0a1a      	lsrs	r2, r3, #8
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0c1a      	lsrs	r2, r3, #16
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3302      	adds	r3, #2
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0e1a      	lsrs	r2, r3, #24
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	3303      	adds	r3, #3
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4413      	add	r3, r2
 8001918:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3304      	adds	r3, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0a1a      	lsrs	r2, r3, #8
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	3305      	adds	r3, #5
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0c1a      	lsrs	r2, r3, #16
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3306      	adds	r3, #6
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0e1a      	lsrs	r2, r3, #24
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	3307      	adds	r3, #7
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d108      	bne.n	800198c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0220 	orr.w	r2, r2, #32
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	e007      	b.n	800199c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0220 	orr.w	r2, r2, #32
 800199a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e006      	b.n	80019ae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
  }
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d002      	beq.n	80019d8 <HAL_CAN_ActivateNotification+0x1e>
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d109      	bne.n	80019ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6959      	ldr	r1, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e006      	b.n	80019fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b08a      	sub	sp, #40	; 0x28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d07c      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d023      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f983 	bl	8001d74 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a6e:	e016      	b.n	8001a9e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	e00c      	b.n	8001a9e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d004      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	e002      	b.n	8001a9e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f989 	bl	8001db0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d024      	beq.n	8001af2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f963 	bl	8001d88 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ac2:	e016      	b.n	8001af2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	e00c      	b.n	8001af2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	e002      	b.n	8001af2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f969 	bl	8001dc4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d024      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f943 	bl	8001d9c <HAL_CAN_TxMailbox2CompleteCallback>
 8001b16:	e016      	b.n	8001b46 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	e00c      	b.n	8001b46 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	e002      	b.n	8001b46 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f949 	bl	8001dd8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2210      	movs	r2, #16
 8001b68:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2208      	movs	r2, #8
 8001b84:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f930 	bl	8001dec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe fe05 	bl	80007b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00c      	beq.n	8001bce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2210      	movs	r2, #16
 8001bcc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d006      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2208      	movs	r2, #8
 8001be8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f912 	bl	8001e14 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8f9 	bl	8001e00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2210      	movs	r2, #16
 8001c28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8fc 	bl	8001e28 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8f5 	bl	8001e3c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d07b      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d072      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d043      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03e      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd4:	2b60      	cmp	r3, #96	; 0x60
 8001cd6:	d02b      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x32a>
 8001cd8:	2b60      	cmp	r3, #96	; 0x60
 8001cda:	d82e      	bhi.n	8001d3a <HAL_CAN_IRQHandler+0x334>
 8001cdc:	2b50      	cmp	r3, #80	; 0x50
 8001cde:	d022      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x320>
 8001ce0:	2b50      	cmp	r3, #80	; 0x50
 8001ce2:	d82a      	bhi.n	8001d3a <HAL_CAN_IRQHandler+0x334>
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d019      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x316>
 8001ce8:	2b40      	cmp	r3, #64	; 0x40
 8001cea:	d826      	bhi.n	8001d3a <HAL_CAN_IRQHandler+0x334>
 8001cec:	2b30      	cmp	r3, #48	; 0x30
 8001cee:	d010      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x30c>
 8001cf0:	2b30      	cmp	r3, #48	; 0x30
 8001cf2:	d822      	bhi.n	8001d3a <HAL_CAN_IRQHandler+0x334>
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d002      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x2f8>
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d005      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cfc:	e01d      	b.n	8001d3a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d06:	e019      	b.n	8001d3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	f043 0310 	orr.w	r3, r3, #16
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d10:	e014      	b.n	8001d3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d1a:	e00f      	b.n	8001d3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d24:	e00a      	b.n	8001d3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d2e:	e005      	b.n	8001d3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d38:	e000      	b.n	8001d3c <HAL_CAN_IRQHandler+0x336>
            break;
 8001d3a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d4a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2204      	movs	r2, #4
 8001d52:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f872 	bl	8001e50 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4907      	ldr	r1, [pc, #28]	; (8001f00 <__NVIC_EnableIRQ+0x38>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f7ff ff8e 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff29 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff3e 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff8e 	bl	8001f58 <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5d 	bl	8001f04 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff31 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffa2 	bl	8001fc0 <SysTick_Config>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e16b      	b.n	800237c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 815a 	bne.w	8002376 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d130      	bne.n	800213c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d017      	beq.n	8002178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80b4 	beq.w	8002376 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b60      	ldr	r3, [pc, #384]	; (8002394 <HAL_GPIO_Init+0x30c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a5f      	ldr	r2, [pc, #380]	; (8002394 <HAL_GPIO_Init+0x30c>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <HAL_GPIO_Init+0x30c>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222a:	4a5b      	ldr	r2, [pc, #364]	; (8002398 <HAL_GPIO_Init+0x310>)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_GPIO_Init+0x314>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02b      	beq.n	80022ae <HAL_GPIO_Init+0x226>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a51      	ldr	r2, [pc, #324]	; (80023a0 <HAL_GPIO_Init+0x318>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d025      	beq.n	80022aa <HAL_GPIO_Init+0x222>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a50      	ldr	r2, [pc, #320]	; (80023a4 <HAL_GPIO_Init+0x31c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <HAL_GPIO_Init+0x21e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4f      	ldr	r2, [pc, #316]	; (80023a8 <HAL_GPIO_Init+0x320>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x21a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <HAL_GPIO_Init+0x324>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x216>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4d      	ldr	r2, [pc, #308]	; (80023b0 <HAL_GPIO_Init+0x328>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x212>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4c      	ldr	r2, [pc, #304]	; (80023b4 <HAL_GPIO_Init+0x32c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x20e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4b      	ldr	r2, [pc, #300]	; (80023b8 <HAL_GPIO_Init+0x330>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x20a>
 800228e:	2307      	movs	r3, #7
 8002290:	e00e      	b.n	80022b0 <HAL_GPIO_Init+0x228>
 8002292:	2308      	movs	r3, #8
 8002294:	e00c      	b.n	80022b0 <HAL_GPIO_Init+0x228>
 8002296:	2306      	movs	r3, #6
 8002298:	e00a      	b.n	80022b0 <HAL_GPIO_Init+0x228>
 800229a:	2305      	movs	r3, #5
 800229c:	e008      	b.n	80022b0 <HAL_GPIO_Init+0x228>
 800229e:	2304      	movs	r3, #4
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x228>
 80022a2:	2303      	movs	r3, #3
 80022a4:	e004      	b.n	80022b0 <HAL_GPIO_Init+0x228>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_Init+0x228>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x228>
 80022ae:	2300      	movs	r3, #0
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f002 0203 	and.w	r2, r2, #3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4093      	lsls	r3, r2
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c0:	4935      	ldr	r1, [pc, #212]	; (8002398 <HAL_GPIO_Init+0x310>)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_GPIO_Init+0x334>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f2:	4a32      	ldr	r2, [pc, #200]	; (80023bc <HAL_GPIO_Init+0x334>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_GPIO_Init+0x334>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231c:	4a27      	ldr	r2, [pc, #156]	; (80023bc <HAL_GPIO_Init+0x334>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_GPIO_Init+0x334>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <HAL_GPIO_Init+0x334>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_GPIO_Init+0x334>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <HAL_GPIO_Init+0x334>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3301      	adds	r3, #1
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	f67f ae90 	bls.w	80020a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40013800 	.word	0x40013800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40021400 	.word	0x40021400
 80023b4:	40021800 	.word	0x40021800
 80023b8:	40021c00 	.word	0x40021c00
 80023bc:	40013c00 	.word	0x40013c00

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002404:	887a      	ldrh	r2, [r7, #2]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	041a      	lsls	r2, r3, #16
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43d9      	mvns	r1, r3
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	400b      	ands	r3, r1
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002428:	b08f      	sub	sp, #60	; 0x3c
 800242a:	af0a      	add	r7, sp, #40	; 0x28
 800242c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e10f      	b.n	8002658 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f005 ffe2 	bl	800841c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f002 ff2b 	bl	80052d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	687e      	ldr	r6, [r7, #4]
 8002484:	466d      	mov	r5, sp
 8002486:	f106 0410 	add.w	r4, r6, #16
 800248a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002496:	e885 0003 	stmia.w	r5, {r0, r1}
 800249a:	1d33      	adds	r3, r6, #4
 800249c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249e:	6838      	ldr	r0, [r7, #0]
 80024a0:	f002 fe02 	bl	80050a8 <USB_CoreInit>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0d0      	b.n	8002658 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 ff19 	bl	80052f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e04a      	b.n	800255e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	333d      	adds	r3, #61	; 0x3d
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	333c      	adds	r3, #60	; 0x3c
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	b298      	uxth	r0, r3
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3342      	adds	r3, #66	; 0x42
 8002504:	4602      	mov	r2, r0
 8002506:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	333f      	adds	r3, #63	; 0x3f
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3344      	adds	r3, #68	; 0x44
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3348      	adds	r3, #72	; 0x48
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3350      	adds	r3, #80	; 0x50
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	3301      	adds	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	d3af      	bcc.n	80024c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e044      	b.n	80025f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	3301      	adds	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3b5      	bcc.n	800256e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	687e      	ldr	r6, [r7, #4]
 800260a:	466d      	mov	r5, sp
 800260c:	f106 0410 	add.w	r4, r6, #16
 8002610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002618:	e894 0003 	ldmia.w	r4, {r0, r1}
 800261c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002620:	1d33      	adds	r3, r6, #4
 8002622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	f002 feb1 	bl	800538c <USB_DevInit>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e00d      	b.n	8002658 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f003 ff2d 	bl	80064b0 <USB_DevDisconnect>

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002660 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_PCD_Start+0x1c>
 8002678:	2302      	movs	r3, #2
 800267a:	e020      	b.n	80026be <HAL_PCD_Start+0x5e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	2b01      	cmp	r3, #1
 800268a:	d109      	bne.n	80026a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002690:	2b01      	cmp	r3, #1
 8002692:	d005      	beq.n	80026a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fe03 	bl	80052b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fedd 	bl	800646e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026c6:	b590      	push	{r4, r7, lr}
 80026c8:	b08d      	sub	sp, #52	; 0x34
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 ff9b 	bl	8006618 <USB_GetMode>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 839d 	bne.w	8002e24 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 feff 	bl	80064f2 <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8393 	beq.w	8002e22 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fef6 	bl	80064f2 <USB_ReadInterrupts>
 8002706:	4603      	mov	r3, r0
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d107      	bne.n	8002720 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f002 0202 	and.w	r2, r2, #2
 800271e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f003 fee4 	bl	80064f2 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b10      	cmp	r3, #16
 8002732:	d161      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0210 	bic.w	r2, r2, #16
 8002742:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f003 020f 	and.w	r2, r3, #15
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	3304      	adds	r3, #4
 8002762:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	0c5b      	lsrs	r3, r3, #17
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	2b02      	cmp	r3, #2
 800276e:	d124      	bne.n	80027ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d035      	beq.n	80027e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	6a38      	ldr	r0, [r7, #32]
 8002790:	f003 fd1b 	bl	80061ca <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a0:	441a      	add	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b2:	441a      	add	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	619a      	str	r2, [r3, #24]
 80027b8:	e016      	b.n	80027e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	0c5b      	lsrs	r3, r3, #17
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d110      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027cc:	2208      	movs	r2, #8
 80027ce:	4619      	mov	r1, r3
 80027d0:	6a38      	ldr	r0, [r7, #32]
 80027d2:	f003 fcfa 	bl	80061ca <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e2:	441a      	add	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0210 	orr.w	r2, r2, #16
 80027f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fe78 	bl	80064f2 <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002808:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800280c:	d16e      	bne.n	80028ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f003 fe7e 	bl	8006518 <USB_ReadDevAllOutEpInterrupt>
 800281c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800281e:	e062      	b.n	80028e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d057      	beq.n	80028da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fea3 	bl	8006580 <USB_ReadDevOutEPInterrupt>
 800283a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002852:	461a      	mov	r2, r3
 8002854:	2301      	movs	r3, #1
 8002856:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fdb0 	bl	80033c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00c      	beq.n	8002884 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002876:	461a      	mov	r2, r3
 8002878:	2308      	movs	r3, #8
 800287a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800287c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 feaa 	bl	80035d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289a:	461a      	mov	r2, r3
 800289c:	2310      	movs	r3, #16
 800289e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b6:	461a      	mov	r2, r3
 80028b8:	2320      	movs	r3, #32
 80028ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d2:	461a      	mov	r2, r3
 80028d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d199      	bne.n	8002820 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 fdfe 	bl	80064f2 <USB_ReadInterrupts>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002900:	f040 80c0 	bne.w	8002a84 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fe1f 	bl	800654c <USB_ReadDevAllInEpInterrupt>
 800290e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002914:	e0b2      	b.n	8002a7c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80a7 	beq.w	8002a70 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f003 fe45 	bl	80065bc <USB_ReadDevInEPInterrupt>
 8002932:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d057      	beq.n	80029ee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	2201      	movs	r2, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	43db      	mvns	r3, r3
 8002958:	69f9      	ldr	r1, [r7, #28]
 800295a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800295e:	4013      	ands	r3, r2
 8002960:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296e:	461a      	mov	r2, r3
 8002970:	2301      	movs	r3, #1
 8002972:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d132      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3348      	adds	r3, #72	; 0x48
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4403      	add	r3, r0
 800299c:	3344      	adds	r3, #68	; 0x44
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4419      	add	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4403      	add	r3, r0
 80029b0:	3348      	adds	r3, #72	; 0x48
 80029b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d113      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x31c>
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3350      	adds	r3, #80	; 0x50
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d108      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029da:	461a      	mov	r2, r3
 80029dc:	2101      	movs	r1, #1
 80029de:	f003 fe4d 	bl	800667c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f005 fd98 	bl	800851e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a04:	461a      	mov	r2, r3
 8002a06:	2308      	movs	r3, #8
 8002a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a20:	461a      	mov	r2, r3
 8002a22:	2310      	movs	r3, #16
 8002a24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2340      	movs	r3, #64	; 0x40
 8002a40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fc1b 	bl	80032a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	3301      	adds	r3, #1
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f47f af49 	bne.w	8002916 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fd32 	bl	80064f2 <USB_ReadInterrupts>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a98:	d122      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d108      	bne.n	8002aca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fe26 	bl	8003714 <HAL_PCDEx_LPM_Callback>
 8002ac8:	e002      	b.n	8002ad0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f005 fd9e 	bl	800860c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 fd04 	bl	80064f2 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af4:	d112      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f005 fd5a 	bl	80085c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b1a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fce6 	bl	80064f2 <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b30:	f040 80c7 	bne.w	8002cc2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 fd80 	bl	8005654 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b58:	e056      	b.n	8002c08 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b66:	461a      	mov	r2, r3
 8002b68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b6c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7e:	0151      	lsls	r1, r2, #5
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	440a      	add	r2, r1
 8002b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b8c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9e:	0151      	lsls	r1, r2, #5
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	440a      	add	r2, r1
 8002ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ba8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd2:	0151      	lsls	r1, r2, #5
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	440a      	add	r2, r1
 8002bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002be0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf2:	0151      	lsls	r1, r2, #5
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	440a      	add	r2, r1
 8002bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	3301      	adds	r3, #1
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3a3      	bcc.n	8002b5a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c20:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d016      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c3e:	f043 030b 	orr.w	r3, r3, #11
 8002c42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c54:	f043 030b 	orr.w	r3, r3, #11
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	e015      	b.n	8002c88 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c6e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c82:	f043 030b 	orr.w	r3, r3, #11
 8002c86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cac:	461a      	mov	r2, r3
 8002cae:	f003 fce5 	bl	800667c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 fc13 	bl	80064f2 <USB_ReadInterrupts>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd6:	d124      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fca9 	bl	8006634 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f002 fd11 	bl	800570e <USB_GetDevSpeed>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681c      	ldr	r4, [r3, #0]
 8002cf8:	f001 f956 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4620      	mov	r0, r4
 8002d08:	f002 fa30 	bl	800516c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f005 fc2e 	bl	800856e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fbe3 	bl	80064f2 <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d10a      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f005 fc0b 	bl	8008552 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f002 0208 	and.w	r2, r2, #8
 8002d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f003 fbce 	bl	80064f2 <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d60:	d10f      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f005 fc6d 	bl	800864c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fbb3 	bl	80064f2 <USB_ReadInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d96:	d10f      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f005 fc40 	bl	8008628 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 fb98 	bl	80064f2 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d10a      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f005 fc4e 	bl	8008670 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fb82 	bl	80064f2 <USB_ReadInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d115      	bne.n	8002e24 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f005 fc3e 	bl	800868c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	e000      	b.n	8002e24 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002e22:	bf00      	nop
    }
  }
}
 8002e24:	3734      	adds	r7, #52	; 0x34
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}

08002e2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_PCD_SetAddress+0x1a>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e013      	b.n	8002e6c <HAL_PCD_SetAddress+0x42>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fae0 	bl	8006422 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	70fb      	strb	r3, [r7, #3]
 8002e86:	460b      	mov	r3, r1
 8002e88:	803b      	strh	r3, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da0f      	bge.n	8002eba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	3338      	adds	r3, #56	; 0x38
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	705a      	strb	r2, [r3, #1]
 8002eb8:	e00f      	b.n	8002eda <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 020f 	and.w	r2, r3, #15
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ee6:	883a      	ldrh	r2, [r7, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	78ba      	ldrb	r2, [r7, #2]
 8002ef0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f04:	78bb      	ldrb	r3, [r7, #2]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d102      	bne.n	8002f10 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_PCD_EP_Open+0xaa>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e00e      	b.n	8002f3c <HAL_PCD_EP_Open+0xc8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 fc13 	bl	8005758 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	da0f      	bge.n	8002f78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	3338      	adds	r3, #56	; 0x38
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	705a      	strb	r2, [r3, #1]
 8002f76:	e00f      	b.n	8002f98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_PCD_EP_Close+0x6e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e00e      	b.n	8002fd0 <HAL_PCD_EP_Close+0x8c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 fc51 	bl	8005868 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3304      	adds	r3, #4
 8003000:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2200      	movs	r2, #0
 8003018:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301a:	7afb      	ldrb	r3, [r7, #11]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	b2da      	uxtb	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	6979      	ldr	r1, [r7, #20]
 800304c:	f002 ff2c 	bl	8005ea8 <USB_EP0StartXfer>
 8003050:	e008      	b.n	8003064 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	6979      	ldr	r1, [r7, #20]
 8003060:	f002 fcde 	bl	8005a20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003090:	681b      	ldr	r3, [r3, #0]
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	460b      	mov	r3, r1
 80030ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	7afb      	ldrb	r3, [r7, #11]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	3338      	adds	r3, #56	; 0x38
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	3304      	adds	r3, #4
 80030c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2201      	movs	r2, #1
 80030dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030de:	7afb      	ldrb	r3, [r7, #11]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6979      	ldr	r1, [r7, #20]
 8003110:	f002 feca 	bl	8005ea8 <USB_EP0StartXfer>
 8003114:	e008      	b.n	8003128 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	6979      	ldr	r1, [r7, #20]
 8003124:	f002 fc7c 	bl	8005a20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	d901      	bls.n	8003150 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e050      	b.n	80031f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da0f      	bge.n	8003178 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3338      	adds	r3, #56	; 0x38
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	705a      	strb	r2, [r3, #1]
 8003176:	e00d      	b.n	8003194 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_PCD_EP_SetStall+0x82>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e01e      	b.n	80031f2 <HAL_PCD_EP_SetStall+0xc0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 f859 	bl	800627a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	b2d9      	uxtb	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031e2:	461a      	mov	r2, r3
 80031e4:	f003 fa4a 	bl	800667c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 020f 	and.w	r2, r3, #15
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d901      	bls.n	8003218 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e042      	b.n	800329e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da0f      	bge.n	8003240 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	3338      	adds	r3, #56	; 0x38
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	3304      	adds	r3, #4
 8003236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	705a      	strb	r2, [r3, #1]
 800323e:	e00f      	b.n	8003260 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_PCD_EP_ClrStall+0x86>
 800327c:	2302      	movs	r3, #2
 800327e:	e00e      	b.n	800329e <HAL_PCD_EP_ClrStall+0xa4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68f9      	ldr	r1, [r7, #12]
 800328e:	4618      	mov	r0, r3
 8003290:	f003 f861 	bl	8006356 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b08a      	sub	sp, #40	; 0x28
 80032aa:	af02      	add	r7, sp, #8
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	3338      	adds	r3, #56	; 0x38
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	3304      	adds	r3, #4
 80032cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d901      	bls.n	80032de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e06c      	b.n	80033b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d902      	bls.n	80032fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3303      	adds	r3, #3
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003302:	e02b      	b.n	800335c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	429a      	cmp	r2, r3
 8003318:	d902      	bls.n	8003320 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3303      	adds	r3, #3
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003338:	b2db      	uxtb	r3, r3
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4603      	mov	r3, r0
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f002 ff05 	bl	800614e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	441a      	add	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	441a      	add	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	b29b      	uxth	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	429a      	cmp	r2, r3
 8003370:	d809      	bhi.n	8003386 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337a:	429a      	cmp	r2, r3
 800337c:	d203      	bcs.n	8003386 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1be      	bne.n	8003304 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	429a      	cmp	r2, r3
 8003390:	d811      	bhi.n	80033b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	2201      	movs	r2, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	6939      	ldr	r1, [r7, #16]
 80033ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b2:	4013      	ands	r3, r2
 80033b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	333c      	adds	r3, #60	; 0x3c
 80033d8:	3304      	adds	r3, #4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	f040 80a0 	bne.w	8003538 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4a72      	ldr	r2, [pc, #456]	; (80035d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003406:	4293      	cmp	r3, r2
 8003408:	f240 80dd 	bls.w	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80d7 	beq.w	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003424:	461a      	mov	r2, r3
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	6093      	str	r3, [r2, #8]
 800342c:	e0cb      	b.n	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003444:	461a      	mov	r2, r3
 8003446:	2320      	movs	r3, #32
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	e0bc      	b.n	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 80b7 	bne.w	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a5d      	ldr	r2, [pc, #372]	; (80035d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d90f      	bls.n	8003480 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003476:	461a      	mov	r2, r3
 8003478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347c:	6093      	str	r3, [r2, #8]
 800347e:	e0a2      	b.n	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003492:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	0159      	lsls	r1, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	440b      	add	r3, r1
 800349c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4403      	add	r3, r0
 80034b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4403      	add	r3, r0
 80034de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4419      	add	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4403      	add	r3, r0
 80034f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d114      	bne.n	800352a <PCD_EP_OutXfrComplete_int+0x16a>
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d108      	bne.n	800352a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003522:	461a      	mov	r2, r3
 8003524:	2101      	movs	r1, #1
 8003526:	f003 f8a9 	bl	800667c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f004 ffd9 	bl	80084e8 <HAL_PCD_DataOutStageCallback>
 8003536:	e046      	b.n	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d124      	bne.n	800358a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355c:	6093      	str	r3, [r2, #8]
 800355e:	e032      	b.n	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003576:	461a      	mov	r2, r3
 8003578:	2320      	movs	r3, #32
 800357a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f004 ffb0 	bl	80084e8 <HAL_PCD_DataOutStageCallback>
 8003588:	e01d      	b.n	80035c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d114      	bne.n	80035ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d108      	bne.n	80035ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035b2:	461a      	mov	r2, r3
 80035b4:	2100      	movs	r1, #0
 80035b6:	f003 f861 	bl	800667c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f004 ff91 	bl	80084e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	4f54300a 	.word	0x4f54300a
 80035d4:	4f54310a 	.word	0x4f54310a

080035d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	333c      	adds	r3, #60	; 0x3c
 80035f0:	3304      	adds	r3, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a15      	ldr	r2, [pc, #84]	; (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d90e      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f004 ff49 	bl	80084c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d90c      	bls.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800364c:	461a      	mov	r2, r3
 800364e:	2101      	movs	r1, #1
 8003650:	f003 f814 	bl	800667c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	4f54300a 	.word	0x4f54300a

08003664 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
 8003670:	4613      	mov	r3, r2
 8003672:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003682:	883b      	ldrh	r3, [r7, #0]
 8003684:	0419      	lsls	r1, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	430a      	orrs	r2, r1
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
 8003690:	e028      	b.n	80036e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e00d      	b.n	80036c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	3340      	adds	r3, #64	; 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	3301      	adds	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3ec      	bcc.n	80036a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036cc:	883b      	ldrh	r3, [r7, #0]
 80036ce:	0418      	lsls	r0, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4302      	orrs	r2, r0
 80036dc:	3340      	adds	r3, #64	; 0x40
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e264      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d075      	beq.n	8003836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	4ba3      	ldr	r3, [pc, #652]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4ba0      	ldr	r3, [pc, #640]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	2b08      	cmp	r3, #8
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b9d      	ldr	r3, [pc, #628]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b99      	ldr	r3, [pc, #612]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x108>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e23f      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x74>
 8003792:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a90      	ldr	r2, [pc, #576]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x98>
 80037aa:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a8a      	ldr	r2, [pc, #552]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a87      	ldr	r2, [pc, #540]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037c4:	4b84      	ldr	r3, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a80      	ldr	r2, [pc, #512]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fcac 	bl	8001140 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fca8 	bl	8001140 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e204      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xc0>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fc98 	bl	8001140 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd fc94 	bl	8001140 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1f0      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b6c      	ldr	r3, [pc, #432]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0xe8>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b62      	ldr	r3, [pc, #392]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c4      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4952      	ldr	r1, [pc, #328]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_RCC_OscConfig+0x2b0>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fc4d 	bl	8001140 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fd fc49 	bl	8001140 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a5      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4940      	ldr	r1, [pc, #256]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <HAL_RCC_OscConfig+0x2b0>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fc2c 	bl	8001140 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd fc28 	bl	8001140 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e184      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d030      	beq.n	8003978 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <HAL_RCC_OscConfig+0x2b4>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fc0c 	bl	8001140 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fd fc08 	bl	8001140 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e164      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x200>
 800394a:	e015      	b.n	8003978 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_OscConfig+0x2b4>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fd fbf5 	bl	8001140 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395a:	f7fd fbf1 	bl	8001140 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e14d      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a0 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fbb7 	bl	8001140 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e011      	b.n	80039fa <HAL_RCC_OscConfig+0x2ce>
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	42470000 	.word	0x42470000
 80039e0:	42470e80 	.word	0x42470e80
 80039e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e8:	f7fd fbaa 	bl	8001140 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e106      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b85      	ldr	r3, [pc, #532]	; (8003c10 <HAL_RCC_OscConfig+0x4e4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2f0>
 8003a0e:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a80      	ldr	r2, [pc, #512]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	e01c      	b.n	8003a56 <HAL_RCC_OscConfig+0x32a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x312>
 8003a24:	4b7b      	ldr	r3, [pc, #492]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a7a      	ldr	r2, [pc, #488]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	4b78      	ldr	r3, [pc, #480]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a77      	ldr	r2, [pc, #476]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3c:	e00b      	b.n	8003a56 <HAL_RCC_OscConfig+0x32a>
 8003a3e:	4b75      	ldr	r3, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a74      	ldr	r2, [pc, #464]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	4b72      	ldr	r3, [pc, #456]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a71      	ldr	r2, [pc, #452]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d015      	beq.n	8003a8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fb6f 	bl	8001140 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fd fb6b 	bl	8001140 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0c5      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ee      	beq.n	8003a66 <HAL_RCC_OscConfig+0x33a>
 8003a88:	e014      	b.n	8003ab4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7fd fb59 	bl	8001140 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fd fb55 	bl	8001140 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0af      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa8:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ee      	bne.n	8003a92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aba:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a55      	ldr	r2, [pc, #340]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 809b 	beq.w	8003c06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d05c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d141      	bne.n	8003b68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fd fb29 	bl	8001140 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fd fb25 	bl	8001140 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e081      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	4937      	ldr	r1, [pc, #220]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd fafe 	bl	8001140 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd fafa 	bl	8001140 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e056      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x41c>
 8003b66:	e04e      	b.n	8003c06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fd fae7 	bl	8001140 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fd fae3 	bl	8001140 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e03f      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x44a>
 8003b94:	e037      	b.n	8003c06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e032      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d028      	beq.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d11a      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d111      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40007000 	.word	0x40007000
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470060 	.word	0x42470060

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cc      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b68      	ldr	r3, [pc, #416]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e067      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4934      	ldr	r1, [pc, #208]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fa18 	bl	8001140 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd fa14 	bl	8001140 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd f978 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08008afc 	.word	0x08008afc
 8003de0:	20000010 	.word	0x20000010
 8003de4:	20000014 	.word	0x20000014

08003de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e00:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d00d      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	f200 80bd 	bhi.w	8003f8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x34>
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e1a:	e0b7      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e1e:	60bb      	str	r3, [r7, #8]
       break;
 8003e20:	e0b7      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e22:	4b60      	ldr	r3, [pc, #384]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e24:	60bb      	str	r3, [r7, #8]
      break;
 8003e26:	e0b4      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e28:	4b5d      	ldr	r3, [pc, #372]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e32:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04d      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b58      	ldr	r3, [pc, #352]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	461a      	mov	r2, r3
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	ea02 0800 	and.w	r8, r2, r0
 8003e56:	ea03 0901 	and.w	r9, r3, r1
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	014b      	lsls	r3, r1, #5
 8003e68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e6c:	0142      	lsls	r2, r0, #5
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	ebb0 0008 	subs.w	r0, r0, r8
 8003e76:	eb61 0109 	sbc.w	r1, r1, r9
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	018b      	lsls	r3, r1, #6
 8003e84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e88:	0182      	lsls	r2, r0, #6
 8003e8a:	1a12      	subs	r2, r2, r0
 8003e8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	00d9      	lsls	r1, r3, #3
 8003e9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e9e:	00d0      	lsls	r0, r2, #3
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	eb12 0208 	adds.w	r2, r2, r8
 8003ea8:	eb43 0309 	adc.w	r3, r3, r9
 8003eac:	f04f 0000 	mov.w	r0, #0
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	0299      	lsls	r1, r3, #10
 8003eb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003eba:	0290      	lsls	r0, r2, #10
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	f7fc f97c 	bl	80001c8 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e04a      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	ea02 0400 	and.w	r4, r2, r0
 8003ef2:	ea03 0501 	and.w	r5, r3, r1
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	014b      	lsls	r3, r1, #5
 8003f04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f08:	0142      	lsls	r2, r0, #5
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	1b00      	subs	r0, r0, r4
 8003f10:	eb61 0105 	sbc.w	r1, r1, r5
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	018b      	lsls	r3, r1, #6
 8003f1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f22:	0182      	lsls	r2, r0, #6
 8003f24:	1a12      	subs	r2, r2, r0
 8003f26:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	00d9      	lsls	r1, r3, #3
 8003f34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f38:	00d0      	lsls	r0, r2, #3
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	1912      	adds	r2, r2, r4
 8003f40:	eb45 0303 	adc.w	r3, r5, r3
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	0299      	lsls	r1, r3, #10
 8003f4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f52:	0290      	lsls	r0, r2, #10
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f7fc f930 	bl	80001c8 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	60bb      	str	r3, [r7, #8]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f8e:	60bb      	str	r3, [r7, #8]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	68bb      	ldr	r3, [r7, #8]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	00f42400 	.word	0x00f42400

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000010 	.word	0x20000010

08003fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e07b      	b.n	80040ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d108      	bne.n	8003fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe2:	d009      	beq.n	8003ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	61da      	str	r2, [r3, #28]
 8003fea:	e005      	b.n	8003ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fc ff4c 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407c:	ea42 0103 	orr.w	r1, r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	f003 0104 	and.w	r1, r3, #4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f003 0210 	and.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b088      	sub	sp, #32
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_SPI_Transmit+0x22>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e126      	b.n	8004342 <HAL_SPI_Transmit+0x270>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040fc:	f7fd f820 	bl	8001140 <HAL_GetTick>
 8004100:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d002      	beq.n	8004118 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004116:	e10b      	b.n	8004330 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_SPI_Transmit+0x52>
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004128:	e102      	b.n	8004330 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2203      	movs	r2, #3
 800412e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004170:	d10f      	bne.n	8004192 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004180:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004190:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d007      	beq.n	80041b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b8:	d14b      	bne.n	8004252 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Transmit+0xf6>
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d13e      	bne.n	8004246 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041ec:	e02b      	b.n	8004246 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d112      	bne.n	8004222 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	881a      	ldrh	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	1c9a      	adds	r2, r3, #2
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004220:	e011      	b.n	8004246 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004222:	f7fc ff8d 	bl	8001140 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d803      	bhi.n	800423a <HAL_SPI_Transmit+0x168>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d102      	bne.n	8004240 <HAL_SPI_Transmit+0x16e>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004244:	e074      	b.n	8004330 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ce      	bne.n	80041ee <HAL_SPI_Transmit+0x11c>
 8004250:	e04c      	b.n	80042ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_SPI_Transmit+0x18e>
 800425a:	8afb      	ldrh	r3, [r7, #22]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d140      	bne.n	80042e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	7812      	ldrb	r2, [r2, #0]
 800426c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004286:	e02c      	b.n	80042e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d113      	bne.n	80042be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	7812      	ldrb	r2, [r2, #0]
 80042a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80042bc:	e011      	b.n	80042e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042be:	f7fc ff3f 	bl	8001140 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d803      	bhi.n	80042d6 <HAL_SPI_Transmit+0x204>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d102      	bne.n	80042dc <HAL_SPI_Transmit+0x20a>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042e0:	e026      	b.n	8004330 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1cd      	bne.n	8004288 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	6839      	ldr	r1, [r7, #0]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fbcb 	bl	8004a8c <SPI_EndRxTxTransaction>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e000      	b.n	8004330 <HAL_SPI_Transmit+0x25e>
  }

error:
 800432e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004340:	7ffb      	ldrb	r3, [r7, #31]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b088      	sub	sp, #32
 800434e:	af02      	add	r7, sp, #8
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004366:	d112      	bne.n	800438e <HAL_SPI_Receive+0x44>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10e      	bne.n	800438e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2204      	movs	r2, #4
 8004374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f8f1 	bl	800456c <HAL_SPI_TransmitReceive>
 800438a:	4603      	mov	r3, r0
 800438c:	e0ea      	b.n	8004564 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_SPI_Receive+0x52>
 8004398:	2302      	movs	r3, #2
 800439a:	e0e3      	b.n	8004564 <HAL_SPI_Receive+0x21a>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043a4:	f7fc fecc 	bl	8001140 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d002      	beq.n	80043bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80043b6:	2302      	movs	r3, #2
 80043b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043ba:	e0ca      	b.n	8004552 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_SPI_Receive+0x7e>
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043cc:	e0c1      	b.n	8004552 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2204      	movs	r2, #4
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004414:	d10f      	bne.n	8004436 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	d007      	beq.n	8004454 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004452:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d162      	bne.n	8004522 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800445c:	e02e      	b.n	80044bc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d115      	bne.n	8004498 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f103 020c 	add.w	r2, r3, #12
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004496:	e011      	b.n	80044bc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004498:	f7fc fe52 	bl	8001140 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d803      	bhi.n	80044b0 <HAL_SPI_Receive+0x166>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Receive+0x16c>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044ba:	e04a      	b.n	8004552 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1cb      	bne.n	800445e <HAL_SPI_Receive+0x114>
 80044c6:	e031      	b.n	800452c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d113      	bne.n	80044fe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	b292      	uxth	r2, r2
 80044e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	1c9a      	adds	r2, r3, #2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fc:	e011      	b.n	8004522 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fe:	f7fc fe1f 	bl	8001140 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d803      	bhi.n	8004516 <HAL_SPI_Receive+0x1cc>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d102      	bne.n	800451c <HAL_SPI_Receive+0x1d2>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004520:	e017      	b.n	8004552 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1cd      	bne.n	80044c8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fa45 	bl	80049c0 <SPI_EndRxTransaction>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
 800454e:	e000      	b.n	8004552 <HAL_SPI_Receive+0x208>
  }

error :
 8004550:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004562:	7dfb      	ldrb	r3, [r7, #23]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	; 0x30
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800457a:	2301      	movs	r3, #1
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x26>
 800458e:	2302      	movs	r3, #2
 8004590:	e18a      	b.n	80048a8 <HAL_SPI_TransmitReceive+0x33c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800459a:	f7fc fdd1 	bl	8001140 <HAL_GetTick>
 800459e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045b0:	887b      	ldrh	r3, [r7, #2]
 80045b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d00f      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x70>
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c2:	d107      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d103      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x68>
 80045cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d003      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045da:	e15b      	b.n	8004894 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x82>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x82>
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045f4:	e14e      	b.n	8004894 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d003      	beq.n	800460a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2205      	movs	r2, #5
 8004606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	887a      	ldrh	r2, [r7, #2]
 800461a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	887a      	ldrh	r2, [r7, #2]
 8004632:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d007      	beq.n	800465e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800465c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004666:	d178      	bne.n	800475a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_SPI_TransmitReceive+0x10a>
 8004670:	8b7b      	ldrh	r3, [r7, #26]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d166      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	881a      	ldrh	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800469a:	e053      	b.n	8004744 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d11b      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x176>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d016      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0x176>
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d113      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	881a      	ldrh	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d119      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x1b8>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d014      	beq.n	8004724 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	b292      	uxth	r2, r2
 8004706:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	1c9a      	adds	r2, r3, #2
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004720:	2301      	movs	r3, #1
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004724:	f7fc fd0c 	bl	8001140 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004730:	429a      	cmp	r2, r3
 8004732:	d807      	bhi.n	8004744 <HAL_SPI_TransmitReceive+0x1d8>
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d003      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004742:	e0a7      	b.n	8004894 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1a6      	bne.n	800469c <HAL_SPI_TransmitReceive+0x130>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1a1      	bne.n	800469c <HAL_SPI_TransmitReceive+0x130>
 8004758:	e07c      	b.n	8004854 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SPI_TransmitReceive+0x1fc>
 8004762:	8b7b      	ldrh	r3, [r7, #26]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d16b      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	7812      	ldrb	r2, [r2, #0]
 8004774:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800478e:	e057      	b.n	8004840 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d11c      	bne.n	80047d8 <HAL_SPI_TransmitReceive+0x26c>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d017      	beq.n	80047d8 <HAL_SPI_TransmitReceive+0x26c>
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d114      	bne.n	80047d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	330c      	adds	r3, #12
 80047b8:	7812      	ldrb	r2, [r2, #0]
 80047ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d119      	bne.n	800481a <HAL_SPI_TransmitReceive+0x2ae>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d014      	beq.n	800481a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004816:	2301      	movs	r3, #1
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800481a:	f7fc fc91 	bl	8001140 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004826:	429a      	cmp	r2, r3
 8004828:	d803      	bhi.n	8004832 <HAL_SPI_TransmitReceive+0x2c6>
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d102      	bne.n	8004838 <HAL_SPI_TransmitReceive+0x2cc>
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	2b00      	cmp	r3, #0
 8004836:	d103      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800483e:	e029      	b.n	8004894 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1a2      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x224>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d19d      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f917 	bl	8004a8c <SPI_EndRxTxTransaction>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d006      	beq.n	8004872 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004870:	e010      	b.n	8004894 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	e000      	b.n	8004894 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004892:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3730      	adds	r7, #48	; 0x30
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048c0:	f7fc fc3e 	bl	8001140 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048d0:	f7fc fc36 	bl	8001140 <HAL_GetTick>
 80048d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048d6:	4b39      	ldr	r3, [pc, #228]	; (80049bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	015b      	lsls	r3, r3, #5
 80048dc:	0d1b      	lsrs	r3, r3, #20
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048e6:	e054      	b.n	8004992 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d050      	beq.n	8004992 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048f0:	f7fc fc26 	bl	8001140 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d902      	bls.n	8004906 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d13d      	bne.n	8004982 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004914:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800491e:	d111      	bne.n	8004944 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004928:	d004      	beq.n	8004934 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d107      	bne.n	8004944 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004942:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494c:	d10f      	bne.n	800496e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800496c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e017      	b.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	3b01      	subs	r3, #1
 8004990:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4013      	ands	r3, r2
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d19b      	bne.n	80048e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000010 	.word	0x20000010

080049c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d4:	d111      	bne.n	80049fa <SPI_EndRxTransaction+0x3a>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049de:	d004      	beq.n	80049ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e8:	d107      	bne.n	80049fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a02:	d12a      	bne.n	8004a5a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a0c:	d012      	beq.n	8004a34 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff ff49 	bl	80048b0 <SPI_WaitFlagStateUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02d      	beq.n	8004a80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e026      	b.n	8004a82 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff ff36 	bl	80048b0 <SPI_WaitFlagStateUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01a      	beq.n	8004a80 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e013      	b.n	8004a82 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2200      	movs	r2, #0
 8004a62:	2101      	movs	r1, #1
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff ff23 	bl	80048b0 <SPI_WaitFlagStateUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e000      	b.n	8004a82 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a98:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <SPI_EndRxTxTransaction+0x7c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <SPI_EndRxTxTransaction+0x80>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0d5b      	lsrs	r3, r3, #21
 8004aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab6:	d112      	bne.n	8004ade <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fef4 	bl	80048b0 <SPI_WaitFlagStateUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e00f      	b.n	8004afe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d0f2      	beq.n	8004ade <SPI_EndRxTxTransaction+0x52>
 8004af8:	e000      	b.n	8004afc <SPI_EndRxTxTransaction+0x70>
        break;
 8004afa:	bf00      	nop
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000010 	.word	0x20000010
 8004b0c:	165e9f81 	.word	0x165e9f81

08004b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e041      	b.n	8004ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc fa02 	bl	8000f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 f8f4 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_TIM_ConfigClockSource+0x1c>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e0b4      	b.n	8004d34 <HAL_TIM_ConfigClockSource+0x186>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004be8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c02:	d03e      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xd4>
 8004c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c08:	f200 8087 	bhi.w	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c10:	f000 8086 	beq.w	8004d20 <HAL_TIM_ConfigClockSource+0x172>
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d87f      	bhi.n	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
 8004c1a:	2b70      	cmp	r3, #112	; 0x70
 8004c1c:	d01a      	beq.n	8004c54 <HAL_TIM_ConfigClockSource+0xa6>
 8004c1e:	2b70      	cmp	r3, #112	; 0x70
 8004c20:	d87b      	bhi.n	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
 8004c22:	2b60      	cmp	r3, #96	; 0x60
 8004c24:	d050      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0x11a>
 8004c26:	2b60      	cmp	r3, #96	; 0x60
 8004c28:	d877      	bhi.n	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
 8004c2a:	2b50      	cmp	r3, #80	; 0x50
 8004c2c:	d03c      	beq.n	8004ca8 <HAL_TIM_ConfigClockSource+0xfa>
 8004c2e:	2b50      	cmp	r3, #80	; 0x50
 8004c30:	d873      	bhi.n	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d058      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x13a>
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d86f      	bhi.n	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
 8004c3a:	2b30      	cmp	r3, #48	; 0x30
 8004c3c:	d064      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0x15a>
 8004c3e:	2b30      	cmp	r3, #48	; 0x30
 8004c40:	d86b      	bhi.n	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d060      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0x15a>
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d867      	bhi.n	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d05c      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d05a      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0x15a>
 8004c52:	e062      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6899      	ldr	r1, [r3, #8]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f000 f984 	bl	8004f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	609a      	str	r2, [r3, #8]
      break;
 8004c80:	e04f      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f000 f96d 	bl	8004f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca4:	609a      	str	r2, [r3, #8]
      break;
 8004ca6:	e03c      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f000 f8e1 	bl	8004e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2150      	movs	r1, #80	; 0x50
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 f93a 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 8004cc6:	e02c      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f000 f900 	bl	8004eda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2160      	movs	r1, #96	; 0x60
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f92a 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 8004ce6:	e01c      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f000 f8c1 	bl	8004e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2140      	movs	r1, #64	; 0x40
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f91a 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 8004d06:	e00c      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f000 f911 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 8004d18:	e003      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1e:	e000      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a40      	ldr	r2, [pc, #256]	; (8004e50 <TIM_Base_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d00f      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a3d      	ldr	r2, [pc, #244]	; (8004e54 <TIM_Base_SetConfig+0x118>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <TIM_Base_SetConfig+0x11c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a3b      	ldr	r2, [pc, #236]	; (8004e5c <TIM_Base_SetConfig+0x120>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <TIM_Base_SetConfig+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2f      	ldr	r2, [pc, #188]	; (8004e50 <TIM_Base_SetConfig+0x114>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d027      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2c      	ldr	r2, [pc, #176]	; (8004e54 <TIM_Base_SetConfig+0x118>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d023      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2b      	ldr	r2, [pc, #172]	; (8004e58 <TIM_Base_SetConfig+0x11c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2a      	ldr	r2, [pc, #168]	; (8004e5c <TIM_Base_SetConfig+0x120>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <TIM_Base_SetConfig+0x124>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d017      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a28      	ldr	r2, [pc, #160]	; (8004e64 <TIM_Base_SetConfig+0x128>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a27      	ldr	r2, [pc, #156]	; (8004e68 <TIM_Base_SetConfig+0x12c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <TIM_Base_SetConfig+0x130>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <TIM_Base_SetConfig+0x134>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a24      	ldr	r2, [pc, #144]	; (8004e74 <TIM_Base_SetConfig+0x138>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <TIM_Base_SetConfig+0x13c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <TIM_Base_SetConfig+0x114>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0xf8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <TIM_Base_SetConfig+0x124>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d103      	bne.n	8004e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	615a      	str	r2, [r3, #20]
}
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800
 8004e70:	40001800 	.word	0x40001800
 8004e74:	40001c00 	.word	0x40001c00
 8004e78:	40002000 	.word	0x40002000

08004e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 030a 	bic.w	r3, r3, #10
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0210 	bic.w	r2, r3, #16
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f043 0307 	orr.w	r3, r3, #7
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e05a      	b.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a21      	ldr	r2, [pc, #132]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d022      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005014:	d01d      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d018      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1b      	ldr	r2, [pc, #108]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1a      	ldr	r2, [pc, #104]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a18      	ldr	r2, [pc, #96]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d10c      	bne.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	4313      	orrs	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40001800 	.word	0x40001800

080050a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a8:	b084      	sub	sp, #16
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	f107 001c 	add.w	r0, r7, #28
 80050b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d122      	bne.n	8005106 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 fb1c 	bl	8006738 <USB_CoreReset>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
 8005104:	e01a      	b.n	800513c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 fb10 	bl	8006738 <USB_CoreReset>
 8005118:	4603      	mov	r3, r0
 800511a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	639a      	str	r2, [r3, #56]	; 0x38
 800512e:	e005      	b.n	800513c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10b      	bne.n	800515a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f043 0206 	orr.w	r2, r3, #6
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800515a:	7bfb      	ldrb	r3, [r7, #15]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005166:	b004      	add	sp, #16
 8005168:	4770      	bx	lr
	...

0800516c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d165      	bne.n	800524c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4a41      	ldr	r2, [pc, #260]	; (8005288 <USB_SetTurnaroundTime+0x11c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d906      	bls.n	8005196 <USB_SetTurnaroundTime+0x2a>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4a40      	ldr	r2, [pc, #256]	; (800528c <USB_SetTurnaroundTime+0x120>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d202      	bcs.n	8005196 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005190:	230f      	movs	r3, #15
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	e062      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4a3c      	ldr	r2, [pc, #240]	; (800528c <USB_SetTurnaroundTime+0x120>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d306      	bcc.n	80051ac <USB_SetTurnaroundTime+0x40>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4a3b      	ldr	r2, [pc, #236]	; (8005290 <USB_SetTurnaroundTime+0x124>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d202      	bcs.n	80051ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051a6:	230e      	movs	r3, #14
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e057      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4a38      	ldr	r2, [pc, #224]	; (8005290 <USB_SetTurnaroundTime+0x124>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d306      	bcc.n	80051c2 <USB_SetTurnaroundTime+0x56>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4a37      	ldr	r2, [pc, #220]	; (8005294 <USB_SetTurnaroundTime+0x128>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d202      	bcs.n	80051c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051bc:	230d      	movs	r3, #13
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e04c      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4a33      	ldr	r2, [pc, #204]	; (8005294 <USB_SetTurnaroundTime+0x128>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d306      	bcc.n	80051d8 <USB_SetTurnaroundTime+0x6c>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4a32      	ldr	r2, [pc, #200]	; (8005298 <USB_SetTurnaroundTime+0x12c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d802      	bhi.n	80051d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051d2:	230c      	movs	r3, #12
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e041      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4a2f      	ldr	r2, [pc, #188]	; (8005298 <USB_SetTurnaroundTime+0x12c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d906      	bls.n	80051ee <USB_SetTurnaroundTime+0x82>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4a2e      	ldr	r2, [pc, #184]	; (800529c <USB_SetTurnaroundTime+0x130>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d802      	bhi.n	80051ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051e8:	230b      	movs	r3, #11
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e036      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4a2a      	ldr	r2, [pc, #168]	; (800529c <USB_SetTurnaroundTime+0x130>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d906      	bls.n	8005204 <USB_SetTurnaroundTime+0x98>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4a29      	ldr	r2, [pc, #164]	; (80052a0 <USB_SetTurnaroundTime+0x134>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d802      	bhi.n	8005204 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051fe:	230a      	movs	r3, #10
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e02b      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <USB_SetTurnaroundTime+0x134>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d906      	bls.n	800521a <USB_SetTurnaroundTime+0xae>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a25      	ldr	r2, [pc, #148]	; (80052a4 <USB_SetTurnaroundTime+0x138>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d202      	bcs.n	800521a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005214:	2309      	movs	r3, #9
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e020      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <USB_SetTurnaroundTime+0x138>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d306      	bcc.n	8005230 <USB_SetTurnaroundTime+0xc4>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <USB_SetTurnaroundTime+0x13c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d802      	bhi.n	8005230 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800522a:	2308      	movs	r3, #8
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e015      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <USB_SetTurnaroundTime+0x13c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d906      	bls.n	8005246 <USB_SetTurnaroundTime+0xda>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <USB_SetTurnaroundTime+0x140>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d202      	bcs.n	8005246 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005240:	2307      	movs	r3, #7
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	e00a      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005246:	2306      	movs	r3, #6
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e007      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d102      	bne.n	8005258 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005252:	2309      	movs	r3, #9
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e001      	b.n	800525c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005258:	2309      	movs	r3, #9
 800525a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	00d8acbf 	.word	0x00d8acbf
 800528c:	00e4e1c0 	.word	0x00e4e1c0
 8005290:	00f42400 	.word	0x00f42400
 8005294:	01067380 	.word	0x01067380
 8005298:	011a499f 	.word	0x011a499f
 800529c:	01312cff 	.word	0x01312cff
 80052a0:	014ca43f 	.word	0x014ca43f
 80052a4:	016e3600 	.word	0x016e3600
 80052a8:	01a6ab1f 	.word	0x01a6ab1f
 80052ac:	01e84800 	.word	0x01e84800

080052b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d115      	bne.n	8005342 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005322:	2001      	movs	r0, #1
 8005324:	f7fb ff18 	bl	8001158 <HAL_Delay>
      ms++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f001 f972 	bl	8006618 <USB_GetMode>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d01e      	beq.n	8005378 <USB_SetCurrentMode+0x84>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b31      	cmp	r3, #49	; 0x31
 800533e:	d9f0      	bls.n	8005322 <USB_SetCurrentMode+0x2e>
 8005340:	e01a      	b.n	8005378 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d115      	bne.n	8005374 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005354:	2001      	movs	r0, #1
 8005356:	f7fb feff 	bl	8001158 <HAL_Delay>
      ms++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 f959 	bl	8006618 <USB_GetMode>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <USB_SetCurrentMode+0x84>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b31      	cmp	r3, #49	; 0x31
 8005370:	d9f0      	bls.n	8005354 <USB_SetCurrentMode+0x60>
 8005372:	e001      	b.n	8005378 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e005      	b.n	8005384 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b32      	cmp	r3, #50	; 0x32
 800537c:	d101      	bne.n	8005382 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800538c:	b084      	sub	sp, #16
 800538e:	b580      	push	{r7, lr}
 8005390:	b086      	sub	sp, #24
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800539a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	e009      	b.n	80053c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	3340      	adds	r3, #64	; 0x40
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	2200      	movs	r2, #0
 80053b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3301      	adds	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b0e      	cmp	r3, #14
 80053c4:	d9f2      	bls.n	80053ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d11c      	bne.n	8005406 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
 8005404:	e00b      	b.n	800541e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005424:	461a      	mov	r2, r3
 8005426:	2300      	movs	r3, #0
 8005428:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005430:	4619      	mov	r1, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	461a      	mov	r2, r3
 800543a:	680b      	ldr	r3, [r1, #0]
 800543c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10c      	bne.n	800545e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800544a:	2100      	movs	r1, #0
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f945 	bl	80056dc <USB_SetDevSpeed>
 8005452:	e008      	b.n	8005466 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005454:	2101      	movs	r1, #1
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f940 	bl	80056dc <USB_SetDevSpeed>
 800545c:	e003      	b.n	8005466 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800545e:	2103      	movs	r1, #3
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f93b 	bl	80056dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005466:	2110      	movs	r1, #16
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f8f3 	bl	8005654 <USB_FlushTxFifo>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f90f 	bl	800569c <USB_FlushRxFifo>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	461a      	mov	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	461a      	mov	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	461a      	mov	r2, r3
 80054a8:	2300      	movs	r3, #0
 80054aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	e043      	b.n	800553a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c8:	d118      	bne.n	80054fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	e013      	b.n	800550e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	461a      	mov	r2, r3
 80054f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e008      	b.n	800550e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	461a      	mov	r2, r3
 800550a:	2300      	movs	r3, #0
 800550c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	461a      	mov	r2, r3
 800552e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005532:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3301      	adds	r3, #1
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	429a      	cmp	r2, r3
 8005540:	d3b7      	bcc.n	80054b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005542:	2300      	movs	r3, #0
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e043      	b.n	80055d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555e:	d118      	bne.n	8005592 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	461a      	mov	r2, r3
 8005574:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e013      	b.n	80055a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	461a      	mov	r2, r3
 800558a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	e008      	b.n	80055a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	461a      	mov	r2, r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	461a      	mov	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	3301      	adds	r3, #1
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d3b7      	bcc.n	8005548 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f043 0210 	orr.w	r2, r3, #16
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <USB_DevInit+0x2c4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f043 0208 	orr.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d107      	bne.n	8005640 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005638:	f043 0304 	orr.w	r3, r3, #4
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800564c:	b004      	add	sp, #16
 800564e:	4770      	bx	lr
 8005650:	803c3800 	.word	0x803c3800

08005654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	4a08      	ldr	r2, [pc, #32]	; (8005698 <USB_FlushTxFifo+0x44>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e006      	b.n	800568c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d0f1      	beq.n	800566e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	00030d40 	.word	0x00030d40

0800569c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2210      	movs	r2, #16
 80056ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <USB_FlushRxFifo+0x3c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e006      	b.n	80056cc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d0f1      	beq.n	80056ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	00030d40 	.word	0x00030d40

080056dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fc:	4313      	orrs	r3, r2
 80056fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800570e:	b480      	push	{r7}
 8005710:	b087      	sub	sp, #28
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0306 	and.w	r3, r3, #6
 8005726:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
 8005732:	e00a      	b.n	800574a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d002      	beq.n	8005740 <USB_GetDevSpeed+0x32>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b06      	cmp	r3, #6
 800573e:	d102      	bne.n	8005746 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005740:	2302      	movs	r3, #2
 8005742:	75fb      	strb	r3, [r7, #23]
 8005744:	e001      	b.n	800574a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005746:	230f      	movs	r3, #15
 8005748:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800574a:	7dfb      	ldrb	r3, [r7, #23]
}
 800574c:	4618      	mov	r0, r3
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d13a      	bne.n	80057ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	2101      	movs	r1, #1
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	b29b      	uxth	r3, r3
 800578c:	68f9      	ldr	r1, [r7, #12]
 800578e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005792:	4313      	orrs	r3, r2
 8005794:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d155      	bne.n	8005858 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	78db      	ldrb	r3, [r3, #3]
 80057c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	059b      	lsls	r3, r3, #22
 80057ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057d0:	4313      	orrs	r3, r2
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e036      	b.n	8005858 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	2101      	movs	r1, #1
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005808:	4313      	orrs	r3, r2
 800580a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d11a      	bne.n	8005858 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	78db      	ldrb	r3, [r3, #3]
 800583c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800583e:	430b      	orrs	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005856:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d161      	bne.n	8005948 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589a:	d11f      	bne.n	80058dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f303 	lsl.w	r3, r1, r3
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	68f9      	ldr	r1, [r7, #12]
 80058f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058fc:	4013      	ands	r3, r2
 80058fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	2101      	movs	r1, #1
 8005912:	fa01 f303 	lsl.w	r3, r1, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005920:	4013      	ands	r3, r2
 8005922:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	0159      	lsls	r1, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	440b      	add	r3, r1
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	4619      	mov	r1, r3
 8005940:	4b35      	ldr	r3, [pc, #212]	; (8005a18 <USB_DeactivateEndpoint+0x1b0>)
 8005942:	4013      	ands	r3, r2
 8005944:	600b      	str	r3, [r1, #0]
 8005946:	e060      	b.n	8005a0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800595a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800595e:	d11f      	bne.n	80059a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800597e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800599e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	2101      	movs	r1, #1
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	041b      	lsls	r3, r3, #16
 80059b8:	43db      	mvns	r3, r3
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c0:	4013      	ands	r3, r2
 80059c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	2101      	movs	r1, #1
 80059d6:	fa01 f303 	lsl.w	r3, r1, r3
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	43db      	mvns	r3, r3
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e4:	4013      	ands	r3, r2
 80059e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	0159      	lsls	r1, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	440b      	add	r3, r1
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	4619      	mov	r1, r3
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <USB_DeactivateEndpoint+0x1b4>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	ec337800 	.word	0xec337800
 8005a1c:	eff37800 	.word	0xeff37800

08005a20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	f040 815c 	bne.w	8005cfa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d132      	bne.n	8005ab0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa8:	0cdb      	lsrs	r3, r3, #19
 8005aaa:	04db      	lsls	r3, r3, #19
 8005aac:	6113      	str	r3, [r2, #16]
 8005aae:	e074      	b.n	8005b9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	0cdb      	lsrs	r3, r3, #19
 8005acc:	04db      	lsls	r3, r3, #19
 8005ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6959      	ldr	r1, [r3, #20]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	440b      	add	r3, r1
 8005b0c:	1e59      	subs	r1, r3, #1
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b16:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b18:	4b9d      	ldr	r3, [pc, #628]	; (8005d90 <USB_EPStartXfer+0x370>)
 8005b1a:	400b      	ands	r3, r1
 8005b1c:	69b9      	ldr	r1, [r7, #24]
 8005b1e:	0148      	lsls	r0, r1, #5
 8005b20:	69f9      	ldr	r1, [r7, #28]
 8005b22:	4401      	add	r1, r0
 8005b24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b42:	69b9      	ldr	r1, [r7, #24]
 8005b44:	0148      	lsls	r0, r1, #5
 8005b46:	69f9      	ldr	r1, [r7, #28]
 8005b48:	4401      	add	r1, r0
 8005b4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	78db      	ldrb	r3, [r3, #3]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d11f      	bne.n	8005b9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d14b      	bne.n	8005c38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	78db      	ldrb	r3, [r3, #3]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d128      	bne.n	8005c16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d110      	bne.n	8005bf6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e00f      	b.n	8005c16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e12f      	b.n	8005e98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	78db      	ldrb	r3, [r3, #3]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d015      	beq.n	8005c8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8117 	beq.w	8005e98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c80:	69f9      	ldr	r1, [r7, #28]
 8005c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c86:	4313      	orrs	r3, r2
 8005c88:	634b      	str	r3, [r1, #52]	; 0x34
 8005c8a:	e105      	b.n	8005e98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d110      	bne.n	8005cbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e00f      	b.n	8005cde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68d9      	ldr	r1, [r3, #12]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	b298      	uxth	r0, r3
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fa2b 	bl	800614e <USB_WritePacket>
 8005cf8:	e0ce      	b.n	8005e98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d14:	0cdb      	lsrs	r3, r3, #19
 8005d16:	04db      	lsls	r3, r3, #19
 8005d18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d126      	bne.n	8005d94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5c:	69b9      	ldr	r1, [r7, #24]
 8005d5e:	0148      	lsls	r0, r1, #5
 8005d60:	69f9      	ldr	r1, [r7, #28]
 8005d62:	4401      	add	r1, r0
 8005d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d8a:	6113      	str	r3, [r2, #16]
 8005d8c:	e036      	b.n	8005dfc <USB_EPStartXfer+0x3dc>
 8005d8e:	bf00      	nop
 8005d90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	1e5a      	subs	r2, r3, #1
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	8afb      	ldrh	r3, [r7, #22]
 8005dba:	04d9      	lsls	r1, r3, #19
 8005dbc:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <USB_EPStartXfer+0x484>)
 8005dbe:	400b      	ands	r3, r1
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	0148      	lsls	r0, r1, #5
 8005dc4:	69f9      	ldr	r1, [r7, #28]
 8005dc6:	4401      	add	r1, r0
 8005dc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	8af9      	ldrh	r1, [r7, #22]
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dec:	69b9      	ldr	r1, [r7, #24]
 8005dee:	0148      	lsls	r0, r1, #5
 8005df0:	69f9      	ldr	r1, [r7, #28]
 8005df2:	4401      	add	r1, r0
 8005df4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d10d      	bne.n	8005e1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68d9      	ldr	r1, [r3, #12]
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	78db      	ldrb	r3, [r3, #3]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d128      	bne.n	8005e78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d110      	bne.n	8005e58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	e00f      	b.n	8005e78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	1ff80000 	.word	0x1ff80000

08005ea8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	f040 80cd 	bne.w	8006064 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d132      	bne.n	8005f38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ef0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f30:	0cdb      	lsrs	r3, r3, #19
 8005f32:	04db      	lsls	r3, r3, #19
 8005f34:	6113      	str	r3, [r2, #16]
 8005f36:	e04e      	b.n	8005fd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f52:	0cdb      	lsrs	r3, r3, #19
 8005f54:	04db      	lsls	r3, r3, #19
 8005f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d903      	bls.n	8005f90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	6939      	ldr	r1, [r7, #16]
 8005fc8:	0148      	lsls	r0, r1, #5
 8005fca:	6979      	ldr	r1, [r7, #20]
 8005fcc:	4401      	add	r1, r0
 8005fce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d11e      	bne.n	800601a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d009      	beq.n	8005ff8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	e092      	b.n	8006140 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006038:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d07e      	beq.n	8006140 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	2101      	movs	r1, #1
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	6979      	ldr	r1, [r7, #20]
 800605a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800605e:	4313      	orrs	r3, r2
 8006060:	634b      	str	r3, [r1, #52]	; 0x34
 8006062:	e06d      	b.n	8006140 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607e:	0cdb      	lsrs	r3, r3, #19
 8006080:	04db      	lsls	r3, r3, #19
 8006082:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ee:	6939      	ldr	r1, [r7, #16]
 80060f0:	0148      	lsls	r0, r1, #5
 80060f2:	6979      	ldr	r1, [r7, #20]
 80060f4:	4401      	add	r1, r0
 80060f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060fa:	4313      	orrs	r3, r2
 80060fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d10d      	bne.n	8006120 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	68d9      	ldr	r1, [r3, #12]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	460a      	mov	r2, r1
 800611e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800613e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800614e:	b480      	push	{r7}
 8006150:	b089      	sub	sp, #36	; 0x24
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	4611      	mov	r1, r2
 800615a:	461a      	mov	r2, r3
 800615c:	460b      	mov	r3, r1
 800615e:	71fb      	strb	r3, [r7, #7]
 8006160:	4613      	mov	r3, r2
 8006162:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800616c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d123      	bne.n	80061bc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006174:	88bb      	ldrh	r3, [r7, #4]
 8006176:	3303      	adds	r3, #3
 8006178:	089b      	lsrs	r3, r3, #2
 800617a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	e018      	b.n	80061b4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	031a      	lsls	r2, r3, #12
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	4413      	add	r3, r2
 800618a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618e:	461a      	mov	r2, r3
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	3301      	adds	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	3301      	adds	r3, #1
 80061a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	3301      	adds	r3, #1
 80061a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	3301      	adds	r3, #1
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d3e2      	bcc.n	8006182 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3724      	adds	r7, #36	; 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b08b      	sub	sp, #44	; 0x2c
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	4613      	mov	r3, r2
 80061d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	089b      	lsrs	r3, r3, #2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061f0:	2300      	movs	r3, #0
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	e014      	b.n	8006220 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	601a      	str	r2, [r3, #0]
    pDest++;
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	3301      	adds	r3, #1
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	3301      	adds	r3, #1
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	3301      	adds	r3, #1
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	3301      	adds	r3, #1
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	3301      	adds	r3, #1
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	429a      	cmp	r2, r3
 8006226:	d3e6      	bcc.n	80061f6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006228:	8bfb      	ldrh	r3, [r7, #30]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01e      	beq.n	800626c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006238:	461a      	mov	r2, r3
 800623a:	f107 0310 	add.w	r3, r7, #16
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	fa22 f303 	lsr.w	r3, r2, r3
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	701a      	strb	r2, [r3, #0]
      i++;
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	3301      	adds	r3, #1
 8006258:	623b      	str	r3, [r7, #32]
      pDest++;
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	3301      	adds	r3, #1
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006260:	8bfb      	ldrh	r3, [r7, #30]
 8006262:	3b01      	subs	r3, #1
 8006264:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006266:	8bfb      	ldrh	r3, [r7, #30]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ea      	bne.n	8006242 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800626e:	4618      	mov	r0, r3
 8006270:	372c      	adds	r7, #44	; 0x2c
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d12c      	bne.n	80062f0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	db12      	blt.n	80062ce <USB_EPSetStall+0x54>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00f      	beq.n	80062ce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062cc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	e02b      	b.n	8006348 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	db12      	blt.n	8006328 <USB_EPSetStall+0xae>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00f      	beq.n	8006328 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006326:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006346:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d128      	bne.n	80063c4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006390:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	78db      	ldrb	r3, [r3, #3]
 8006396:	2b03      	cmp	r3, #3
 8006398:	d003      	beq.n	80063a2 <USB_EPClearStall+0x4c>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	78db      	ldrb	r3, [r3, #3]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d138      	bne.n	8006414 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e027      	b.n	8006414 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	78db      	ldrb	r3, [r3, #3]
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d003      	beq.n	80063f4 <USB_EPClearStall+0x9e>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	78db      	ldrb	r3, [r3, #3]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d10f      	bne.n	8006414 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006412:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006422:	b480      	push	{r7}
 8006424:	b085      	sub	sp, #20
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	460b      	mov	r3, r1
 800642c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006440:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006444:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006456:	68f9      	ldr	r1, [r7, #12]
 8006458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006488:	f023 0303 	bic.w	r3, r3, #3
 800648c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800649c:	f023 0302 	bic.w	r3, r3, #2
 80064a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064ca:	f023 0303 	bic.w	r3, r3, #3
 80064ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064de:	f043 0302 	orr.w	r3, r3, #2
 80064e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4013      	ands	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800650a:	68fb      	ldr	r3, [r7, #12]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4013      	ands	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	0c1b      	lsrs	r3, r3, #16
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4013      	ands	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	b29b      	uxth	r3, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	4013      	ands	r3, r2
 80065ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065ae:	68bb      	ldr	r3, [r7, #8]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ec:	01db      	lsls	r3, r3, #7
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4013      	ands	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800660a:	68bb      	ldr	r3, [r7, #8]
}
 800660c:	4618      	mov	r0, r3
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0301 	and.w	r3, r3, #1
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006652:	f023 0307 	bic.w	r3, r3, #7
 8006656:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	460b      	mov	r3, r1
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	333c      	adds	r3, #60	; 0x3c
 8006692:	3304      	adds	r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4a26      	ldr	r2, [pc, #152]	; (8006734 <USB_EP0_OutStart+0xb8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d90a      	bls.n	80066b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b0:	d101      	bne.n	80066b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e037      	b.n	8006726 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066bc:	461a      	mov	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e4:	f043 0318 	orr.w	r3, r3, #24
 80066e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80066fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d10f      	bne.n	8006724 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	461a      	mov	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006722:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	4f54300a 	.word	0x4f54300a

08006738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	4a13      	ldr	r2, [pc, #76]	; (8006798 <USB_CoreReset+0x60>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d901      	bls.n	8006754 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e01a      	b.n	800678a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	daf3      	bge.n	8006744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f043 0201 	orr.w	r2, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	4a09      	ldr	r2, [pc, #36]	; (8006798 <USB_CoreReset+0x60>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e006      	b.n	800678a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b01      	cmp	r3, #1
 8006786:	d0f1      	beq.n	800676c <USB_CoreReset+0x34>

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	00030d40 	.word	0x00030d40

0800679c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80067ac:	f002 f906 	bl	80089bc <USBD_static_malloc>
 80067b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d105      	bne.n	80067c4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80067c0:	2302      	movs	r3, #2
 80067c2:	e066      	b.n	8006892 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	7c1b      	ldrb	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d119      	bne.n	8006808 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d8:	2202      	movs	r2, #2
 80067da:	2181      	movs	r1, #129	; 0x81
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 ffca 	bl	8008776 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ec:	2202      	movs	r2, #2
 80067ee:	2101      	movs	r1, #1
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 ffc0 	bl	8008776 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2210      	movs	r2, #16
 8006802:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006806:	e016      	b.n	8006836 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	2202      	movs	r2, #2
 800680c:	2181      	movs	r1, #129	; 0x81
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 ffb1 	bl	8008776 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800681a:	2340      	movs	r3, #64	; 0x40
 800681c:	2202      	movs	r2, #2
 800681e:	2101      	movs	r1, #1
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 ffa8 	bl	8008776 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2210      	movs	r2, #16
 8006832:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006836:	2308      	movs	r3, #8
 8006838:	2203      	movs	r2, #3
 800683a:	2182      	movs	r1, #130	; 0x82
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 ff9a 	bl	8008776 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7c1b      	ldrb	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006876:	2101      	movs	r1, #1
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f002 f86b 	bl	8008954 <USBD_LL_PrepareReceive>
 800687e:	e007      	b.n	8006890 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	2101      	movs	r1, #1
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f002 f862 	bl	8008954 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80068a6:	2181      	movs	r1, #129	; 0x81
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 ff8a 	bl	80087c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068b4:	2101      	movs	r1, #1
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 ff83 	bl	80087c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068c4:	2182      	movs	r1, #130	; 0x82
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 ff7b 	bl	80087c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00e      	beq.n	8006904 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068f6:	4618      	mov	r0, r3
 80068f8:	f002 f86e 	bl	80089d8 <USBD_static_free>
    pdev->pClassData = NULL;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006920:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	e0af      	b.n	8006a98 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006940:	2b00      	cmp	r3, #0
 8006942:	d03f      	beq.n	80069c4 <USBD_CDC_Setup+0xb4>
 8006944:	2b20      	cmp	r3, #32
 8006946:	f040 809f 	bne.w	8006a88 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02e      	beq.n	80069b0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	b25b      	sxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	da16      	bge.n	800698a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006968:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	88d2      	ldrh	r2, [r2, #6]
 800696e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	88db      	ldrh	r3, [r3, #6]
 8006974:	2b07      	cmp	r3, #7
 8006976:	bf28      	it	cs
 8006978:	2307      	movcs	r3, #7
 800697a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	89fa      	ldrh	r2, [r7, #14]
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fae9 	bl	8007f5a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006988:	e085      	b.n	8006a96 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	785a      	ldrb	r2, [r3, #1]
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	88db      	ldrh	r3, [r3, #6]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80069a0:	6939      	ldr	r1, [r7, #16]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	88db      	ldrh	r3, [r3, #6]
 80069a6:	461a      	mov	r2, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 fb02 	bl	8007fb2 <USBD_CtlPrepareRx>
      break;
 80069ae:	e072      	b.n	8006a96 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	7850      	ldrb	r0, [r2, #1]
 80069bc:	2200      	movs	r2, #0
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	4798      	blx	r3
      break;
 80069c2:	e068      	b.n	8006a96 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	2b0b      	cmp	r3, #11
 80069ca:	d852      	bhi.n	8006a72 <USBD_CDC_Setup+0x162>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <USBD_CDC_Setup+0xc4>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	08006a05 	.word	0x08006a05
 80069d8:	08006a81 	.word	0x08006a81
 80069dc:	08006a73 	.word	0x08006a73
 80069e0:	08006a73 	.word	0x08006a73
 80069e4:	08006a73 	.word	0x08006a73
 80069e8:	08006a73 	.word	0x08006a73
 80069ec:	08006a73 	.word	0x08006a73
 80069f0:	08006a73 	.word	0x08006a73
 80069f4:	08006a73 	.word	0x08006a73
 80069f8:	08006a73 	.word	0x08006a73
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a59 	.word	0x08006a59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d107      	bne.n	8006a20 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a10:	f107 030a 	add.w	r3, r7, #10
 8006a14:	2202      	movs	r2, #2
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fa9e 	bl	8007f5a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a1e:	e032      	b.n	8006a86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fa28 	bl	8007e78 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a2c:	e02b      	b.n	8006a86 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d107      	bne.n	8006a4a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a3a:	f107 030d 	add.w	r3, r7, #13
 8006a3e:	2201      	movs	r2, #1
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fa89 	bl	8007f5a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a48:	e01d      	b.n	8006a86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fa13 	bl	8007e78 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	75fb      	strb	r3, [r7, #23]
          break;
 8006a56:	e016      	b.n	8006a86 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d00f      	beq.n	8006a84 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fa06 	bl	8007e78 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a70:	e008      	b.n	8006a84 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 f9ff 	bl	8007e78 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7e:	e002      	b.n	8006a86 <USBD_CDC_Setup+0x176>
          break;
 8006a80:	bf00      	nop
 8006a82:	e008      	b.n	8006a96 <USBD_CDC_Setup+0x186>
          break;
 8006a84:	bf00      	nop
      }
      break;
 8006a86:	e006      	b.n	8006a96 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 f9f4 	bl	8007e78 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	75fb      	strb	r3, [r7, #23]
      break;
 8006a94:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ab2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e04f      	b.n	8006b62 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ac8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006aca:	78fa      	ldrb	r2, [r7, #3]
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3318      	adds	r3, #24
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d029      	beq.n	8006b34 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	3318      	adds	r3, #24
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	78f9      	ldrb	r1, [r7, #3]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	460b      	mov	r3, r1
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	1a5b      	subs	r3, r3, r1
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4403      	add	r3, r0
 8006b00:	3344      	adds	r3, #68	; 0x44
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b08:	fb03 f301 	mul.w	r3, r3, r1
 8006b0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d110      	bne.n	8006b34 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	3318      	adds	r3, #24
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b26:	78f9      	ldrb	r1, [r7, #3]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fef0 	bl	8008912 <USBD_LL_Transmit>
 8006b32:	e015      	b.n	8006b60 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e015      	b.n	8006bb8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 ff00 	bl	8008996 <USBD_LL_GetRxDataSize>
 8006b96:	4602      	mov	r2, r0
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e01b      	b.n	8006c12 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d015      	beq.n	8006c10 <USBD_CDC_EP0_RxReady+0x50>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bea:	2bff      	cmp	r3, #255	; 0xff
 8006bec:	d010      	beq.n	8006c10 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006bfc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c04:	b292      	uxth	r2, r2
 8006c06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	22ff      	movs	r2, #255	; 0xff
 8006c0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2243      	movs	r2, #67	; 0x43
 8006c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	200000a4 	.word	0x200000a4

08006c3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2243      	movs	r2, #67	; 0x43
 8006c48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006c4a:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000060 	.word	0x20000060

08006c5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2243      	movs	r2, #67	; 0x43
 8006c68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006c6a:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	200000e8 	.word	0x200000e8

08006c7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	220a      	movs	r2, #10
 8006c88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c8a:	4b03      	ldr	r3, [pc, #12]	; (8006c98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	2000001c 	.word	0x2000001c

08006c9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e004      	b.n	8006cba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b087      	sub	sp, #28
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e008      	b.n	8006cf6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d12:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e004      	b.n	8006d28 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e016      	b.n	8006d80 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7c1b      	ldrb	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d64:	2101      	movs	r1, #1
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fdf4 	bl	8008954 <USBD_LL_PrepareReceive>
 8006d6c:	e007      	b.n	8006d7e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	2101      	movs	r1, #1
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 fdeb 	bl	8008954 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e01f      	b.n	8006de0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	79fa      	ldrb	r2, [r7, #7]
 8006dd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f001 fc67 	bl	80086a8 <USBD_LL_Init>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e016      	b.n	8006e2e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	f107 020e 	add.w	r2, r7, #14
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	4602      	mov	r2, r0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fc7e 	bl	8008740 <USBD_LL_Start>
 8006e44:	4603      	mov	r3, r0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e70:	2303      	movs	r3, #3
 8006e72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
  }

  return USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 ff90 	bl	8007e04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f00:	f003 031f 	and.w	r3, r3, #31
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d01a      	beq.n	8006f3e <USBD_LL_SetupStage+0x72>
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d822      	bhi.n	8006f52 <USBD_LL_SetupStage+0x86>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <USBD_LL_SetupStage+0x4a>
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d00a      	beq.n	8006f2a <USBD_LL_SetupStage+0x5e>
 8006f14:	e01d      	b.n	8006f52 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa62 	bl	80073e8 <USBD_StdDevReq>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	e020      	b.n	8006f6c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fac6 	bl	80074c4 <USBD_StdItfReq>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3c:	e016      	b.n	8006f6c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb05 	bl	8007556 <USBD_StdEPReq>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f50:	e00c      	b.n	8006f6c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 fc4d 	bl	8008800 <USBD_LL_StallEP>
 8006f66:	4603      	mov	r3, r0
 8006f68:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6a:	bf00      	nop
  }

  return ret;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b086      	sub	sp, #24
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d138      	bne.n	8006ffc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d14a      	bne.n	8007032 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d913      	bls.n	8006fd0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	1ad2      	subs	r2, r2, r3
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bf28      	it	cs
 8006fc2:	4613      	movcs	r3, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f001 f80f 	bl	8007fec <USBD_CtlContinueRx>
 8006fce:	e030      	b.n	8007032 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d10b      	bne.n	8006ff4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f001 f80a 	bl	800800e <USBD_CtlSendStatus>
 8006ffa:	e01a      	b.n	8007032 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b03      	cmp	r3, #3
 8007006:	d114      	bne.n	8007032 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00e      	beq.n	8007032 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	7afa      	ldrb	r2, [r7, #11]
 800701e:	4611      	mov	r1, r2
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	4798      	blx	r3
 8007024:	4603      	mov	r3, r0
 8007026:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	e000      	b.n	8007034 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	460b      	mov	r3, r1
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d16b      	bne.n	8007128 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3314      	adds	r3, #20
 8007054:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800705c:	2b02      	cmp	r3, #2
 800705e:	d156      	bne.n	800710e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	429a      	cmp	r2, r3
 800706a:	d914      	bls.n	8007096 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	1ad2      	subs	r2, r2, r3
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	461a      	mov	r2, r3
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 ff84 	bl	8007f90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007088:	2300      	movs	r3, #0
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f001 fc60 	bl	8008954 <USBD_LL_PrepareReceive>
 8007094:	e03b      	b.n	800710e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d11c      	bne.n	80070dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d316      	bcc.n	80070dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d20f      	bcs.n	80070dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070bc:	2200      	movs	r2, #0
 80070be:	2100      	movs	r1, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 ff65 	bl	8007f90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ce:	2300      	movs	r3, #0
 80070d0:	2200      	movs	r2, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f001 fc3d 	bl	8008954 <USBD_LL_PrepareReceive>
 80070da:	e018      	b.n	800710e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d10b      	bne.n	8007100 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f001 fb7c 	bl	8008800 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 ff93 	bl	8008034 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007114:	2b01      	cmp	r3, #1
 8007116:	d122      	bne.n	800715e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff fe98 	bl	8006e4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007126:	e01a      	b.n	800715e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b03      	cmp	r3, #3
 8007132:	d114      	bne.n	800715e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	7afa      	ldrb	r2, [r7, #11]
 800714a:	4611      	mov	r1, r2
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	4798      	blx	r3
 8007150:	4603      	mov	r3, r0
 8007152:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	e000      	b.n	8007160 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	e02f      	b.n	80071fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00f      	beq.n	80071c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6852      	ldr	r2, [r2, #4]
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	4611      	mov	r1, r2
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071c6:	2340      	movs	r3, #64	; 0x40
 80071c8:	2200      	movs	r2, #0
 80071ca:	2100      	movs	r1, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 fad2 	bl	8008776 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2240      	movs	r2, #64	; 0x40
 80071de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071e2:	2340      	movs	r3, #64	; 0x40
 80071e4:	2200      	movs	r2, #0
 80071e6:	2180      	movs	r1, #128	; 0x80
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fac4 	bl	8008776 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2240      	movs	r2, #64	; 0x40
 80071f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007232:	b2da      	uxtb	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2204      	movs	r2, #4
 800723e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b04      	cmp	r3, #4
 8007262:	d106      	bne.n	8007272 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800726a:	b2da      	uxtb	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007292:	2303      	movs	r3, #3
 8007294:	e012      	b.n	80072bc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d10b      	bne.n	80072ba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	e014      	b.n	8007308 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d10d      	bne.n	8007306 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	4611      	mov	r1, r2
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007326:	2303      	movs	r3, #3
 8007328:	e014      	b.n	8007354 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b03      	cmp	r3, #3
 8007334:	d10d      	bne.n	8007352 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	78fa      	ldrb	r2, [r7, #3]
 800734c:	4611      	mov	r1, r2
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6852      	ldr	r2, [r2, #4]
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	4611      	mov	r1, r2
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
  }

  return USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b087      	sub	sp, #28
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3301      	adds	r3, #1
 80073c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073c8:	8a3b      	ldrh	r3, [r7, #16]
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	b21a      	sxth	r2, r3
 80073ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	b21b      	sxth	r3, r3
 80073d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073d8:	89fb      	ldrh	r3, [r7, #14]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d005      	beq.n	800740e <USBD_StdDevReq+0x26>
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d853      	bhi.n	80074ae <USBD_StdDevReq+0xc6>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <USBD_StdDevReq+0x3a>
 800740a:	2b20      	cmp	r3, #32
 800740c:	d14f      	bne.n	80074ae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
      break;
 8007420:	e04a      	b.n	80074b8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b09      	cmp	r3, #9
 8007428:	d83b      	bhi.n	80074a2 <USBD_StdDevReq+0xba>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <USBD_StdDevReq+0x48>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007485 	.word	0x08007485
 8007434:	08007499 	.word	0x08007499
 8007438:	080074a3 	.word	0x080074a3
 800743c:	0800748f 	.word	0x0800748f
 8007440:	080074a3 	.word	0x080074a3
 8007444:	08007463 	.word	0x08007463
 8007448:	08007459 	.word	0x08007459
 800744c:	080074a3 	.word	0x080074a3
 8007450:	0800747b 	.word	0x0800747b
 8007454:	0800746d 	.word	0x0800746d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f9de 	bl	800781c <USBD_GetDescriptor>
          break;
 8007460:	e024      	b.n	80074ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fb43 	bl	8007af0 <USBD_SetAddress>
          break;
 800746a:	e01f      	b.n	80074ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fb82 	bl	8007b78 <USBD_SetConfig>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
          break;
 8007478:	e018      	b.n	80074ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fc21 	bl	8007cc4 <USBD_GetConfig>
          break;
 8007482:	e013      	b.n	80074ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fc52 	bl	8007d30 <USBD_GetStatus>
          break;
 800748c:	e00e      	b.n	80074ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fc81 	bl	8007d98 <USBD_SetFeature>
          break;
 8007496:	e009      	b.n	80074ac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fc90 	bl	8007dc0 <USBD_ClrFeature>
          break;
 80074a0:	e004      	b.n	80074ac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fce7 	bl	8007e78 <USBD_CtlError>
          break;
 80074aa:	bf00      	nop
      }
      break;
 80074ac:	e004      	b.n	80074b8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fce1 	bl	8007e78 <USBD_CtlError>
      break;
 80074b6:	bf00      	nop
  }

  return ret;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop

080074c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074da:	2b40      	cmp	r3, #64	; 0x40
 80074dc:	d005      	beq.n	80074ea <USBD_StdItfReq+0x26>
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d82f      	bhi.n	8007542 <USBD_StdItfReq+0x7e>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <USBD_StdItfReq+0x26>
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d12b      	bne.n	8007542 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d81d      	bhi.n	8007534 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	889b      	ldrh	r3, [r3, #4]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d813      	bhi.n	800752a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	4798      	blx	r3
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	88db      	ldrh	r3, [r3, #6]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d110      	bne.n	800753e <USBD_StdItfReq+0x7a>
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10d      	bne.n	800753e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd73 	bl	800800e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007528:	e009      	b.n	800753e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fca3 	bl	8007e78 <USBD_CtlError>
          break;
 8007532:	e004      	b.n	800753e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fc9e 	bl	8007e78 <USBD_CtlError>
          break;
 800753c:	e000      	b.n	8007540 <USBD_StdItfReq+0x7c>
          break;
 800753e:	bf00      	nop
      }
      break;
 8007540:	e004      	b.n	800754c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fc97 	bl	8007e78 <USBD_CtlError>
      break;
 800754a:	bf00      	nop
  }

  return ret;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	889b      	ldrh	r3, [r3, #4]
 8007568:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d007      	beq.n	8007586 <USBD_StdEPReq+0x30>
 8007576:	2b40      	cmp	r3, #64	; 0x40
 8007578:	f200 8145 	bhi.w	8007806 <USBD_StdEPReq+0x2b0>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00c      	beq.n	800759a <USBD_StdEPReq+0x44>
 8007580:	2b20      	cmp	r3, #32
 8007582:	f040 8140 	bne.w	8007806 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
      break;
 8007598:	e13a      	b.n	8007810 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d007      	beq.n	80075b2 <USBD_StdEPReq+0x5c>
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	f300 8129 	bgt.w	80077fa <USBD_StdEPReq+0x2a4>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d07f      	beq.n	80076ac <USBD_StdEPReq+0x156>
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d03c      	beq.n	800762a <USBD_StdEPReq+0xd4>
 80075b0:	e123      	b.n	80077fa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d002      	beq.n	80075c4 <USBD_StdEPReq+0x6e>
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d016      	beq.n	80075f0 <USBD_StdEPReq+0x9a>
 80075c2:	e02c      	b.n	800761e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00d      	beq.n	80075e6 <USBD_StdEPReq+0x90>
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b80      	cmp	r3, #128	; 0x80
 80075ce:	d00a      	beq.n	80075e6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 f913 	bl	8008800 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075da:	2180      	movs	r1, #128	; 0x80
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 f90f 	bl	8008800 <USBD_LL_StallEP>
 80075e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075e4:	e020      	b.n	8007628 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fc45 	bl	8007e78 <USBD_CtlError>
              break;
 80075ee:	e01b      	b.n	8007628 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	885b      	ldrh	r3, [r3, #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10e      	bne.n	8007616 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <USBD_StdEPReq+0xc0>
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	2b80      	cmp	r3, #128	; 0x80
 8007602:	d008      	beq.n	8007616 <USBD_StdEPReq+0xc0>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	88db      	ldrh	r3, [r3, #6]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d104      	bne.n	8007616 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 f8f5 	bl	8008800 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fcf9 	bl	800800e <USBD_CtlSendStatus>

              break;
 800761c:	e004      	b.n	8007628 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc29 	bl	8007e78 <USBD_CtlError>
              break;
 8007626:	bf00      	nop
          }
          break;
 8007628:	e0ec      	b.n	8007804 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d002      	beq.n	800763c <USBD_StdEPReq+0xe6>
 8007636:	2b03      	cmp	r3, #3
 8007638:	d016      	beq.n	8007668 <USBD_StdEPReq+0x112>
 800763a:	e030      	b.n	800769e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00d      	beq.n	800765e <USBD_StdEPReq+0x108>
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	2b80      	cmp	r3, #128	; 0x80
 8007646:	d00a      	beq.n	800765e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 f8d7 	bl	8008800 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 f8d3 	bl	8008800 <USBD_LL_StallEP>
 800765a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800765c:	e025      	b.n	80076aa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fc09 	bl	8007e78 <USBD_CtlError>
              break;
 8007666:	e020      	b.n	80076aa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d11b      	bne.n	80076a8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f8dd 	bl	800883e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fcc2 	bl	800800e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800769c:	e004      	b.n	80076a8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fbe9 	bl	8007e78 <USBD_CtlError>
              break;
 80076a6:	e000      	b.n	80076aa <USBD_StdEPReq+0x154>
              break;
 80076a8:	bf00      	nop
          }
          break;
 80076aa:	e0ab      	b.n	8007804 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d002      	beq.n	80076be <USBD_StdEPReq+0x168>
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d032      	beq.n	8007722 <USBD_StdEPReq+0x1cc>
 80076bc:	e097      	b.n	80077ee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d007      	beq.n	80076d4 <USBD_StdEPReq+0x17e>
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	2b80      	cmp	r3, #128	; 0x80
 80076c8:	d004      	beq.n	80076d4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fbd3 	bl	8007e78 <USBD_CtlError>
                break;
 80076d2:	e091      	b.n	80077f8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	da0b      	bge.n	80076f4 <USBD_StdEPReq+0x19e>
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	3310      	adds	r3, #16
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	4413      	add	r3, r2
 80076f0:	3304      	adds	r3, #4
 80076f2:	e00b      	b.n	800770c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	4413      	add	r3, r2
 800770a:	3304      	adds	r3, #4
 800770c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2202      	movs	r2, #2
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fc1d 	bl	8007f5a <USBD_CtlSendData>
              break;
 8007720:	e06a      	b.n	80077f8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	da11      	bge.n	800774e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	3324      	adds	r3, #36	; 0x24
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d117      	bne.n	8007774 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb96 	bl	8007e78 <USBD_CtlError>
                  break;
 800774c:	e054      	b.n	80077f8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	f003 020f 	and.w	r2, r3, #15
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d104      	bne.n	8007774 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fb83 	bl	8007e78 <USBD_CtlError>
                  break;
 8007772:	e041      	b.n	80077f8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	da0b      	bge.n	8007794 <USBD_StdEPReq+0x23e>
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	3310      	adds	r3, #16
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	3304      	adds	r3, #4
 8007792:	e00b      	b.n	80077ac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	4413      	add	r3, r2
 80077aa:	3304      	adds	r3, #4
 80077ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <USBD_StdEPReq+0x264>
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b80      	cmp	r3, #128	; 0x80
 80077b8:	d103      	bne.n	80077c2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e00e      	b.n	80077e0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 f858 	bl	800887c <USBD_LL_IsStallEP>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2201      	movs	r2, #1
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	e002      	b.n	80077e0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2202      	movs	r2, #2
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fbb7 	bl	8007f5a <USBD_CtlSendData>
              break;
 80077ec:	e004      	b.n	80077f8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb41 	bl	8007e78 <USBD_CtlError>
              break;
 80077f6:	bf00      	nop
          }
          break;
 80077f8:	e004      	b.n	8007804 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb3b 	bl	8007e78 <USBD_CtlError>
          break;
 8007802:	bf00      	nop
      }
      break;
 8007804:	e004      	b.n	8007810 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fb35 	bl	8007e78 <USBD_CtlError>
      break;
 800780e:	bf00      	nop
  }

  return ret;
 8007810:	7bfb      	ldrb	r3, [r7, #15]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	885b      	ldrh	r3, [r3, #2]
 8007836:	0a1b      	lsrs	r3, r3, #8
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	2b06      	cmp	r3, #6
 800783e:	f200 8128 	bhi.w	8007a92 <USBD_GetDescriptor+0x276>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <USBD_GetDescriptor+0x2c>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	08007865 	.word	0x08007865
 800784c:	0800787d 	.word	0x0800787d
 8007850:	080078bd 	.word	0x080078bd
 8007854:	08007a93 	.word	0x08007a93
 8007858:	08007a93 	.word	0x08007a93
 800785c:	08007a33 	.word	0x08007a33
 8007860:	08007a5f 	.word	0x08007a5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	7c12      	ldrb	r2, [r2, #16]
 8007870:	f107 0108 	add.w	r1, r7, #8
 8007874:	4610      	mov	r0, r2
 8007876:	4798      	blx	r3
 8007878:	60f8      	str	r0, [r7, #12]
      break;
 800787a:	e112      	b.n	8007aa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7c1b      	ldrb	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10d      	bne.n	80078a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	f107 0208 	add.w	r2, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3301      	adds	r3, #1
 800789a:	2202      	movs	r2, #2
 800789c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800789e:	e100      	b.n	8007aa2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	f107 0208 	add.w	r2, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3301      	adds	r3, #1
 80078b6:	2202      	movs	r2, #2
 80078b8:	701a      	strb	r2, [r3, #0]
      break;
 80078ba:	e0f2      	b.n	8007aa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	885b      	ldrh	r3, [r3, #2]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	f200 80ac 	bhi.w	8007a20 <USBD_GetDescriptor+0x204>
 80078c8:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <USBD_GetDescriptor+0xb4>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	080078e9 	.word	0x080078e9
 80078d4:	0800791d 	.word	0x0800791d
 80078d8:	08007951 	.word	0x08007951
 80078dc:	08007985 	.word	0x08007985
 80078e0:	080079b9 	.word	0x080079b9
 80078e4:	080079ed 	.word	0x080079ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00b      	beq.n	800790c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	7c12      	ldrb	r2, [r2, #16]
 8007900:	f107 0108 	add.w	r1, r7, #8
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
 8007908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800790a:	e091      	b.n	8007a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fab2 	bl	8007e78 <USBD_CtlError>
            err++;
 8007914:	7afb      	ldrb	r3, [r7, #11]
 8007916:	3301      	adds	r3, #1
 8007918:	72fb      	strb	r3, [r7, #11]
          break;
 800791a:	e089      	b.n	8007a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00b      	beq.n	8007940 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	7c12      	ldrb	r2, [r2, #16]
 8007934:	f107 0108 	add.w	r1, r7, #8
 8007938:	4610      	mov	r0, r2
 800793a:	4798      	blx	r3
 800793c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800793e:	e077      	b.n	8007a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa98 	bl	8007e78 <USBD_CtlError>
            err++;
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	3301      	adds	r3, #1
 800794c:	72fb      	strb	r3, [r7, #11]
          break;
 800794e:	e06f      	b.n	8007a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	7c12      	ldrb	r2, [r2, #16]
 8007968:	f107 0108 	add.w	r1, r7, #8
 800796c:	4610      	mov	r0, r2
 800796e:	4798      	blx	r3
 8007970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007972:	e05d      	b.n	8007a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa7e 	bl	8007e78 <USBD_CtlError>
            err++;
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	3301      	adds	r3, #1
 8007980:	72fb      	strb	r3, [r7, #11]
          break;
 8007982:	e055      	b.n	8007a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	7c12      	ldrb	r2, [r2, #16]
 800799c:	f107 0108 	add.w	r1, r7, #8
 80079a0:	4610      	mov	r0, r2
 80079a2:	4798      	blx	r3
 80079a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079a6:	e043      	b.n	8007a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa64 	bl	8007e78 <USBD_CtlError>
            err++;
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	3301      	adds	r3, #1
 80079b4:	72fb      	strb	r3, [r7, #11]
          break;
 80079b6:	e03b      	b.n	8007a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	7c12      	ldrb	r2, [r2, #16]
 80079d0:	f107 0108 	add.w	r1, r7, #8
 80079d4:	4610      	mov	r0, r2
 80079d6:	4798      	blx	r3
 80079d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079da:	e029      	b.n	8007a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fa4a 	bl	8007e78 <USBD_CtlError>
            err++;
 80079e4:	7afb      	ldrb	r3, [r7, #11]
 80079e6:	3301      	adds	r3, #1
 80079e8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ea:	e021      	b.n	8007a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	7c12      	ldrb	r2, [r2, #16]
 8007a04:	f107 0108 	add.w	r1, r7, #8
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a0e:	e00f      	b.n	8007a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa30 	bl	8007e78 <USBD_CtlError>
            err++;
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a1e:	e007      	b.n	8007a30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa28 	bl	8007e78 <USBD_CtlError>
          err++;
 8007a28:	7afb      	ldrb	r3, [r7, #11]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a2e:	bf00      	nop
      }
      break;
 8007a30:	e037      	b.n	8007aa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7c1b      	ldrb	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a42:	f107 0208 	add.w	r2, r7, #8
 8007a46:	4610      	mov	r0, r2
 8007a48:	4798      	blx	r3
 8007a4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a4c:	e029      	b.n	8007aa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa11 	bl	8007e78 <USBD_CtlError>
        err++;
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a5c:	e021      	b.n	8007aa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	7c1b      	ldrb	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10d      	bne.n	8007a82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	f107 0208 	add.w	r2, r7, #8
 8007a72:	4610      	mov	r0, r2
 8007a74:	4798      	blx	r3
 8007a76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	2207      	movs	r2, #7
 8007a7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a80:	e00f      	b.n	8007aa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f9f7 	bl	8007e78 <USBD_CtlError>
        err++;
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a90:	e007      	b.n	8007aa2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f9ef 	bl	8007e78 <USBD_CtlError>
      err++;
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007aa0:	bf00      	nop
  }

  if (err != 0U)
 8007aa2:	7afb      	ldrb	r3, [r7, #11]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11e      	bne.n	8007ae6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	88db      	ldrh	r3, [r3, #6]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d016      	beq.n	8007ade <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ab0:	893b      	ldrh	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00e      	beq.n	8007ad4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88da      	ldrh	r2, [r3, #6]
 8007aba:	893b      	ldrh	r3, [r7, #8]
 8007abc:	4293      	cmp	r3, r2
 8007abe:	bf28      	it	cs
 8007ac0:	4613      	movcs	r3, r2
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ac6:	893b      	ldrh	r3, [r7, #8]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fa44 	bl	8007f5a <USBD_CtlSendData>
 8007ad2:	e009      	b.n	8007ae8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9ce 	bl	8007e78 <USBD_CtlError>
 8007adc:	e004      	b.n	8007ae8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa95 	bl	800800e <USBD_CtlSendStatus>
 8007ae4:	e000      	b.n	8007ae8 <USBD_GetDescriptor+0x2cc>
    return;
 8007ae6:	bf00      	nop
  }
}
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop

08007af0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	889b      	ldrh	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d131      	bne.n	8007b66 <USBD_SetAddress+0x76>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	88db      	ldrh	r3, [r3, #6]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d12d      	bne.n	8007b66 <USBD_SetAddress+0x76>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	885b      	ldrh	r3, [r3, #2]
 8007b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b10:	d829      	bhi.n	8007b66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	885b      	ldrh	r3, [r3, #2]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d104      	bne.n	8007b34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f9a3 	bl	8007e78 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b32:	e01d      	b.n	8007b70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7bfa      	ldrb	r2, [r7, #15]
 8007b38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fec7 	bl	80088d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa61 	bl	800800e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5a:	e009      	b.n	8007b70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b64:	e004      	b.n	8007b70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f985 	bl	8007e78 <USBD_CtlError>
  }
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	4b4c      	ldr	r3, [pc, #304]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007b8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b90:	4b4b      	ldr	r3, [pc, #300]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d905      	bls.n	8007ba4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f96c 	bl	8007e78 <USBD_CtlError>
    return USBD_FAIL;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e088      	b.n	8007cb6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d002      	beq.n	8007bb6 <USBD_SetConfig+0x3e>
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d025      	beq.n	8007c00 <USBD_SetConfig+0x88>
 8007bb4:	e071      	b.n	8007c9a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bb6:	4b42      	ldr	r3, [pc, #264]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01c      	beq.n	8007bf8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007bbe:	4b40      	ldr	r3, [pc, #256]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bc8:	4b3d      	ldr	r3, [pc, #244]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff f948 	bl	8006e64 <USBD_SetClassConfig>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f949 	bl	8007e78 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007be6:	e065      	b.n	8007cb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa10 	bl	800800e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bf6:	e05d      	b.n	8007cb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fa08 	bl	800800e <USBD_CtlSendStatus>
      break;
 8007bfe:	e059      	b.n	8007cb4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c00:	4b2f      	ldr	r3, [pc, #188]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d112      	bne.n	8007c2e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c10:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c1a:	4b29      	ldr	r3, [pc, #164]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff f93b 	bl	8006e9c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f9f1 	bl	800800e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c2c:	e042      	b.n	8007cb4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c2e:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d02a      	beq.n	8007c92 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff f929 	bl	8006e9c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c4a:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c54:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff f902 	bl	8006e64 <USBD_SetClassConfig>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00f      	beq.n	8007c8a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f903 	bl	8007e78 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff f90e 	bl	8006e9c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c88:	e014      	b.n	8007cb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9bf 	bl	800800e <USBD_CtlSendStatus>
      break;
 8007c90:	e010      	b.n	8007cb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9bb 	bl	800800e <USBD_CtlSendStatus>
      break;
 8007c98:	e00c      	b.n	8007cb4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8eb 	bl	8007e78 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ca2:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <USBD_SetConfig+0x148>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff f8f7 	bl	8006e9c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb2:	bf00      	nop
  }

  return ret;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200001b0 	.word	0x200001b0

08007cc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	88db      	ldrh	r3, [r3, #6]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d004      	beq.n	8007ce0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f8cd 	bl	8007e78 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cde:	e023      	b.n	8007d28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	dc02      	bgt.n	8007cf2 <USBD_GetConfig+0x2e>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dc03      	bgt.n	8007cf8 <USBD_GetConfig+0x34>
 8007cf0:	e015      	b.n	8007d1e <USBD_GetConfig+0x5a>
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d00b      	beq.n	8007d0e <USBD_GetConfig+0x4a>
 8007cf6:	e012      	b.n	8007d1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3308      	adds	r3, #8
 8007d02:	2201      	movs	r2, #1
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f927 	bl	8007f5a <USBD_CtlSendData>
        break;
 8007d0c:	e00c      	b.n	8007d28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3304      	adds	r3, #4
 8007d12:	2201      	movs	r2, #1
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f91f 	bl	8007f5a <USBD_CtlSendData>
        break;
 8007d1c:	e004      	b.n	8007d28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f8a9 	bl	8007e78 <USBD_CtlError>
        break;
 8007d26:	bf00      	nop
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d81e      	bhi.n	8007d86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	88db      	ldrh	r3, [r3, #6]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d004      	beq.n	8007d5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f890 	bl	8007e78 <USBD_CtlError>
        break;
 8007d58:	e01a      	b.n	8007d90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f043 0202 	orr.w	r2, r3, #2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8eb 	bl	8007f5a <USBD_CtlSendData>
      break;
 8007d84:	e004      	b.n	8007d90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f875 	bl	8007e78 <USBD_CtlError>
      break;
 8007d8e:	bf00      	nop
  }
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	885b      	ldrh	r3, [r3, #2]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d106      	bne.n	8007db8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f92b 	bl	800800e <USBD_CtlSendStatus>
  }
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d80b      	bhi.n	8007df0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10c      	bne.n	8007dfa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f910 	bl	800800e <USBD_CtlSendStatus>
      }
      break;
 8007dee:	e004      	b.n	8007dfa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f840 	bl	8007e78 <USBD_CtlError>
      break;
 8007df8:	e000      	b.n	8007dfc <USBD_ClrFeature+0x3c>
      break;
 8007dfa:	bf00      	nop
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	781a      	ldrb	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff fabb 	bl	80073aa <SWAPBYTE>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3301      	adds	r3, #1
 8007e46:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff faae 	bl	80073aa <SWAPBYTE>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	461a      	mov	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff faa1 	bl	80073aa <SWAPBYTE>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	80da      	strh	r2, [r3, #6]
}
 8007e70:	bf00      	nop
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e82:	2180      	movs	r1, #128	; 0x80
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fcbb 	bl	8008800 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fcb7 	bl	8008800 <USBD_LL_StallEP>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d036      	beq.n	8007f1e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007eb4:	6938      	ldr	r0, [r7, #16]
 8007eb6:	f000 f836 	bl	8007f26 <USBD_GetLen>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4413      	add	r3, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	7812      	ldrb	r2, [r2, #0]
 8007ed2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	4413      	add	r3, r2
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007eea:	e013      	b.n	8007f14 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	7812      	ldrb	r2, [r2, #0]
 8007ef6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	3301      	adds	r3, #1
 8007efc:	613b      	str	r3, [r7, #16]
    idx++;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	3301      	adds	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	4413      	add	r3, r2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	3301      	adds	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e7      	bne.n	8007eec <USBD_GetString+0x52>
 8007f1c:	e000      	b.n	8007f20 <USBD_GetString+0x86>
    return;
 8007f1e:	bf00      	nop
  }
}
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f36:	e005      	b.n	8007f44 <USBD_GetLen+0x1e>
  {
    len++;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f5      	bne.n	8007f38 <USBD_GetLen+0x12>
  }

  return len;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	2100      	movs	r1, #0
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 fcc6 	bl	8008912 <USBD_LL_Transmit>

  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fcb5 	bl	8008912 <USBD_LL_Transmit>

  return USBD_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	2100      	movs	r1, #0
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 fcb9 	bl	8008954 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 fca8 	bl	8008954 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2204      	movs	r2, #4
 800801a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800801e:	2300      	movs	r3, #0
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc74 	bl	8008912 <USBD_LL_Transmit>

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2205      	movs	r2, #5
 8008040:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008044:	2300      	movs	r3, #0
 8008046:	2200      	movs	r2, #0
 8008048:	2100      	movs	r1, #0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fc82 	bl	8008954 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008060:	2200      	movs	r2, #0
 8008062:	4912      	ldr	r1, [pc, #72]	; (80080ac <MX_USB_DEVICE_Init+0x50>)
 8008064:	4812      	ldr	r0, [pc, #72]	; (80080b0 <MX_USB_DEVICE_Init+0x54>)
 8008066:	f7fe fe8f 	bl	8006d88 <USBD_Init>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008070:	f7f8 fe90 	bl	8000d94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008074:	490f      	ldr	r1, [pc, #60]	; (80080b4 <MX_USB_DEVICE_Init+0x58>)
 8008076:	480e      	ldr	r0, [pc, #56]	; (80080b0 <MX_USB_DEVICE_Init+0x54>)
 8008078:	f7fe feb6 	bl	8006de8 <USBD_RegisterClass>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008082:	f7f8 fe87 	bl	8000d94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008086:	490c      	ldr	r1, [pc, #48]	; (80080b8 <MX_USB_DEVICE_Init+0x5c>)
 8008088:	4809      	ldr	r0, [pc, #36]	; (80080b0 <MX_USB_DEVICE_Init+0x54>)
 800808a:	f7fe fe07 	bl	8006c9c <USBD_CDC_RegisterInterface>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008094:	f7f8 fe7e 	bl	8000d94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008098:	4805      	ldr	r0, [pc, #20]	; (80080b0 <MX_USB_DEVICE_Init+0x54>)
 800809a:	f7fe fecc 	bl	8006e36 <USBD_Start>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080a4:	f7f8 fe76 	bl	8000d94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080a8:	bf00      	nop
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20000140 	.word	0x20000140
 80080b0:	200004e8 	.word	0x200004e8
 80080b4:	20000028 	.word	0x20000028
 80080b8:	2000012c 	.word	0x2000012c

080080bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080c0:	2200      	movs	r2, #0
 80080c2:	4905      	ldr	r1, [pc, #20]	; (80080d8 <CDC_Init_FS+0x1c>)
 80080c4:	4805      	ldr	r0, [pc, #20]	; (80080dc <CDC_Init_FS+0x20>)
 80080c6:	f7fe fdfe 	bl	8006cc6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080ca:	4905      	ldr	r1, [pc, #20]	; (80080e0 <CDC_Init_FS+0x24>)
 80080cc:	4803      	ldr	r0, [pc, #12]	; (80080dc <CDC_Init_FS+0x20>)
 80080ce:	f7fe fe18 	bl	8006d02 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000fb8 	.word	0x20000fb8
 80080dc:	200004e8 	.word	0x200004e8
 80080e0:	200007b8 	.word	0x200007b8

080080e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	6039      	str	r1, [r7, #0]
 80080fe:	71fb      	strb	r3, [r7, #7]
 8008100:	4613      	mov	r3, r2
 8008102:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2b23      	cmp	r3, #35	; 0x23
 8008108:	d84a      	bhi.n	80081a0 <CDC_Control_FS+0xac>
 800810a:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <CDC_Control_FS+0x1c>)
 800810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008110:	080081a1 	.word	0x080081a1
 8008114:	080081a1 	.word	0x080081a1
 8008118:	080081a1 	.word	0x080081a1
 800811c:	080081a1 	.word	0x080081a1
 8008120:	080081a1 	.word	0x080081a1
 8008124:	080081a1 	.word	0x080081a1
 8008128:	080081a1 	.word	0x080081a1
 800812c:	080081a1 	.word	0x080081a1
 8008130:	080081a1 	.word	0x080081a1
 8008134:	080081a1 	.word	0x080081a1
 8008138:	080081a1 	.word	0x080081a1
 800813c:	080081a1 	.word	0x080081a1
 8008140:	080081a1 	.word	0x080081a1
 8008144:	080081a1 	.word	0x080081a1
 8008148:	080081a1 	.word	0x080081a1
 800814c:	080081a1 	.word	0x080081a1
 8008150:	080081a1 	.word	0x080081a1
 8008154:	080081a1 	.word	0x080081a1
 8008158:	080081a1 	.word	0x080081a1
 800815c:	080081a1 	.word	0x080081a1
 8008160:	080081a1 	.word	0x080081a1
 8008164:	080081a1 	.word	0x080081a1
 8008168:	080081a1 	.word	0x080081a1
 800816c:	080081a1 	.word	0x080081a1
 8008170:	080081a1 	.word	0x080081a1
 8008174:	080081a1 	.word	0x080081a1
 8008178:	080081a1 	.word	0x080081a1
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081a1 	.word	0x080081a1
 8008184:	080081a1 	.word	0x080081a1
 8008188:	080081a1 	.word	0x080081a1
 800818c:	080081a1 	.word	0x080081a1
 8008190:	080081a1 	.word	0x080081a1
 8008194:	080081a1 	.word	0x080081a1
 8008198:	080081a1 	.word	0x080081a1
 800819c:	080081a1 	.word	0x080081a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081a0:	bf00      	nop
  }

  return (USBD_OK);
 80081a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4805      	ldr	r0, [pc, #20]	; (80081d4 <CDC_Receive_FS+0x24>)
 80081be:	f7fe fda0 	bl	8006d02 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081c2:	4804      	ldr	r0, [pc, #16]	; (80081d4 <CDC_Receive_FS+0x24>)
 80081c4:	f7fe fdb6 	bl	8006d34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200004e8 	.word	0x200004e8

080081d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	6039      	str	r1, [r7, #0]
 8008206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2212      	movs	r2, #18
 800820c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	2000015c 	.word	0x2000015c

08008220 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2204      	movs	r2, #4
 8008230:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008232:	4b03      	ldr	r3, [pc, #12]	; (8008240 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	20000170 	.word	0x20000170

08008244 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	6039      	str	r1, [r7, #0]
 800824e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	4907      	ldr	r1, [pc, #28]	; (8008278 <USBD_FS_ProductStrDescriptor+0x34>)
 800825a:	4808      	ldr	r0, [pc, #32]	; (800827c <USBD_FS_ProductStrDescriptor+0x38>)
 800825c:	f7ff fe1d 	bl	8007e9a <USBD_GetString>
 8008260:	e004      	b.n	800826c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	4904      	ldr	r1, [pc, #16]	; (8008278 <USBD_FS_ProductStrDescriptor+0x34>)
 8008266:	4805      	ldr	r0, [pc, #20]	; (800827c <USBD_FS_ProductStrDescriptor+0x38>)
 8008268:	f7ff fe17 	bl	8007e9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	200017b8 	.word	0x200017b8
 800827c:	08008ab4 	.word	0x08008ab4

08008280 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	4904      	ldr	r1, [pc, #16]	; (80082a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008290:	4804      	ldr	r0, [pc, #16]	; (80082a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008292:	f7ff fe02 	bl	8007e9a <USBD_GetString>
  return USBD_StrDesc;
 8008296:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	200017b8 	.word	0x200017b8
 80082a4:	08008acc 	.word	0x08008acc

080082a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	221a      	movs	r2, #26
 80082b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082ba:	f000 f843 	bl	8008344 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082be:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000174 	.word	0x20000174

080082cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4907      	ldr	r1, [pc, #28]	; (8008300 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082e2:	4808      	ldr	r0, [pc, #32]	; (8008304 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082e4:	f7ff fdd9 	bl	8007e9a <USBD_GetString>
 80082e8:	e004      	b.n	80082f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	4904      	ldr	r1, [pc, #16]	; (8008300 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ee:	4805      	ldr	r0, [pc, #20]	; (8008304 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082f0:	f7ff fdd3 	bl	8007e9a <USBD_GetString>
  }
  return USBD_StrDesc;
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200017b8 	.word	0x200017b8
 8008304:	08008ae0 	.word	0x08008ae0

08008308 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	6039      	str	r1, [r7, #0]
 8008312:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d105      	bne.n	8008326 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4907      	ldr	r1, [pc, #28]	; (800833c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800831e:	4808      	ldr	r0, [pc, #32]	; (8008340 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008320:	f7ff fdbb 	bl	8007e9a <USBD_GetString>
 8008324:	e004      	b.n	8008330 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4904      	ldr	r1, [pc, #16]	; (800833c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800832a:	4805      	ldr	r0, [pc, #20]	; (8008340 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800832c:	f7ff fdb5 	bl	8007e9a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008330:	4b02      	ldr	r3, [pc, #8]	; (800833c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	200017b8 	.word	0x200017b8
 8008340:	08008aec 	.word	0x08008aec

08008344 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800834a:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <Get_SerialNum+0x44>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008350:	4b0e      	ldr	r3, [pc, #56]	; (800838c <Get_SerialNum+0x48>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008356:	4b0e      	ldr	r3, [pc, #56]	; (8008390 <Get_SerialNum+0x4c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4413      	add	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800836a:	2208      	movs	r2, #8
 800836c:	4909      	ldr	r1, [pc, #36]	; (8008394 <Get_SerialNum+0x50>)
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 f814 	bl	800839c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008374:	2204      	movs	r2, #4
 8008376:	4908      	ldr	r1, [pc, #32]	; (8008398 <Get_SerialNum+0x54>)
 8008378:	68b8      	ldr	r0, [r7, #8]
 800837a:	f000 f80f 	bl	800839c <IntToUnicode>
  }
}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	1fff7a10 	.word	0x1fff7a10
 800838c:	1fff7a14 	.word	0x1fff7a14
 8008390:	1fff7a18 	.word	0x1fff7a18
 8008394:	20000176 	.word	0x20000176
 8008398:	20000186 	.word	0x20000186

0800839c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	4613      	mov	r3, r2
 80083a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083ae:	2300      	movs	r3, #0
 80083b0:	75fb      	strb	r3, [r7, #23]
 80083b2:	e027      	b.n	8008404 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	0f1b      	lsrs	r3, r3, #28
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	d80b      	bhi.n	80083d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	0f1b      	lsrs	r3, r3, #28
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	4619      	mov	r1, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	440b      	add	r3, r1
 80083cc:	3230      	adds	r2, #48	; 0x30
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	e00a      	b.n	80083ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	0f1b      	lsrs	r3, r3, #28
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4619      	mov	r1, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	440b      	add	r3, r1
 80083e4:	3237      	adds	r2, #55	; 0x37
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	3301      	adds	r3, #1
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	4413      	add	r3, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	3301      	adds	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
 8008404:	7dfa      	ldrb	r2, [r7, #23]
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	429a      	cmp	r2, r3
 800840a:	d3d3      	bcc.n	80083b4 <IntToUnicode+0x18>
  }
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
	...

0800841c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008424:	f107 0314 	add.w	r3, r7, #20
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	609a      	str	r2, [r3, #8]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800843c:	d13a      	bne.n	80084b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800843e:	2300      	movs	r3, #0
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	4b1e      	ldr	r3, [pc, #120]	; (80084bc <HAL_PCD_MspInit+0xa0>)
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <HAL_PCD_MspInit+0xa0>)
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	6313      	str	r3, [r2, #48]	; 0x30
 800844e:	4b1b      	ldr	r3, [pc, #108]	; (80084bc <HAL_PCD_MspInit+0xa0>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_D__Pin|USB_D_A12_Pin;
 800845a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800845e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008460:	2302      	movs	r3, #2
 8008462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008464:	2300      	movs	r3, #0
 8008466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008468:	2303      	movs	r3, #3
 800846a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800846c:	230a      	movs	r3, #10
 800846e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008470:	f107 0314 	add.w	r3, r7, #20
 8008474:	4619      	mov	r1, r3
 8008476:	4812      	ldr	r0, [pc, #72]	; (80084c0 <HAL_PCD_MspInit+0xa4>)
 8008478:	f7f9 fe06 	bl	8002088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800847c:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <HAL_PCD_MspInit+0xa0>)
 800847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008480:	4a0e      	ldr	r2, [pc, #56]	; (80084bc <HAL_PCD_MspInit+0xa0>)
 8008482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008486:	6353      	str	r3, [r2, #52]	; 0x34
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <HAL_PCD_MspInit+0xa0>)
 800848e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008490:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <HAL_PCD_MspInit+0xa0>)
 8008492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008496:	6453      	str	r3, [r2, #68]	; 0x44
 8008498:	4b08      	ldr	r3, [pc, #32]	; (80084bc <HAL_PCD_MspInit+0xa0>)
 800849a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084a4:	2200      	movs	r2, #0
 80084a6:	2100      	movs	r1, #0
 80084a8:	2043      	movs	r0, #67	; 0x43
 80084aa:	f7f9 fdb6 	bl	800201a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084ae:	2043      	movs	r0, #67	; 0x43
 80084b0:	f7f9 fdcf 	bl	8002052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084b4:	bf00      	nop
 80084b6:	3728      	adds	r7, #40	; 0x28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40023800 	.word	0x40023800
 80084c0:	40020000 	.word	0x40020000

080084c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f7fe fcf6 	bl	8006ecc <USBD_LL_SetupStage>
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	4613      	mov	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	4619      	mov	r1, r3
 8008512:	f7fe fd30 	bl	8006f76 <USBD_LL_DataOutStage>
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	3348      	adds	r3, #72	; 0x48
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	4619      	mov	r1, r3
 8008546:	f7fe fd79 	bl	800703c <USBD_LL_DataInStage>
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fe8d 	bl	8007280 <USBD_LL_SOF>
}
 8008566:	bf00      	nop
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008576:	2301      	movs	r3, #1
 8008578:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]
 8008586:	e008      	b.n	800859a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d102      	bne.n	8008596 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	e001      	b.n	800859a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008596:	f7f8 fbfd 	bl	8000d94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a0:	7bfa      	ldrb	r2, [r7, #15]
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe fe2d 	bl	8007204 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe fdd9 	bl	8007168 <USBD_LL_Reset>
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fe28 	bl	8007224 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	6812      	ldr	r2, [r2, #0]
 80085e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085e6:	f043 0301 	orr.w	r3, r3, #1
 80085ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085f4:	4b04      	ldr	r3, [pc, #16]	; (8008608 <HAL_PCD_SuspendCallback+0x48>)
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	4a03      	ldr	r2, [pc, #12]	; (8008608 <HAL_PCD_SuspendCallback+0x48>)
 80085fa:	f043 0306 	orr.w	r3, r3, #6
 80085fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	e000ed00 	.word	0xe000ed00

0800860c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe fe18 	bl	8007250 <USBD_LL_Resume>
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800863a:	78fa      	ldrb	r2, [r7, #3]
 800863c:	4611      	mov	r1, r2
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fe66 	bl	8007310 <USBD_LL_IsoOUTIncomplete>
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fe2e 	bl	80072c4 <USBD_LL_IsoINIncomplete>
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fe6c 	bl	800735c <USBD_LL_DevConnected>
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fe69 	bl	8007372 <USBD_LL_DevDisconnected>
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d13c      	bne.n	8008732 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80086b8:	4a20      	ldr	r2, [pc, #128]	; (800873c <USBD_LL_Init+0x94>)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a1e      	ldr	r2, [pc, #120]	; (800873c <USBD_LL_Init+0x94>)
 80086c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086c8:	4b1c      	ldr	r3, [pc, #112]	; (800873c <USBD_LL_Init+0x94>)
 80086ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80086d0:	4b1a      	ldr	r3, [pc, #104]	; (800873c <USBD_LL_Init+0x94>)
 80086d2:	2204      	movs	r2, #4
 80086d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80086d6:	4b19      	ldr	r3, [pc, #100]	; (800873c <USBD_LL_Init+0x94>)
 80086d8:	2202      	movs	r2, #2
 80086da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086dc:	4b17      	ldr	r3, [pc, #92]	; (800873c <USBD_LL_Init+0x94>)
 80086de:	2200      	movs	r2, #0
 80086e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086e2:	4b16      	ldr	r3, [pc, #88]	; (800873c <USBD_LL_Init+0x94>)
 80086e4:	2202      	movs	r2, #2
 80086e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086e8:	4b14      	ldr	r3, [pc, #80]	; (800873c <USBD_LL_Init+0x94>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <USBD_LL_Init+0x94>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086f4:	4b11      	ldr	r3, [pc, #68]	; (800873c <USBD_LL_Init+0x94>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80086fa:	4b10      	ldr	r3, [pc, #64]	; (800873c <USBD_LL_Init+0x94>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008700:	4b0e      	ldr	r3, [pc, #56]	; (800873c <USBD_LL_Init+0x94>)
 8008702:	2200      	movs	r2, #0
 8008704:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008706:	480d      	ldr	r0, [pc, #52]	; (800873c <USBD_LL_Init+0x94>)
 8008708:	f7f9 fe8d 	bl	8002426 <HAL_PCD_Init>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008712:	f7f8 fb3f 	bl	8000d94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008716:	2180      	movs	r1, #128	; 0x80
 8008718:	4808      	ldr	r0, [pc, #32]	; (800873c <USBD_LL_Init+0x94>)
 800871a:	f7fa ffea 	bl	80036f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800871e:	2240      	movs	r2, #64	; 0x40
 8008720:	2100      	movs	r1, #0
 8008722:	4806      	ldr	r0, [pc, #24]	; (800873c <USBD_LL_Init+0x94>)
 8008724:	f7fa ff9e 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008728:	2280      	movs	r2, #128	; 0x80
 800872a:	2101      	movs	r1, #1
 800872c:	4803      	ldr	r0, [pc, #12]	; (800873c <USBD_LL_Init+0x94>)
 800872e:	f7fa ff99 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	200019b8 	.word	0x200019b8

08008740 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008756:	4618      	mov	r0, r3
 8008758:	f7f9 ff82 	bl	8002660 <HAL_PCD_Start>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f942 	bl	80089ec <USBD_Get_USB_Status>
 8008768:	4603      	mov	r3, r0
 800876a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876c:	7bbb      	ldrb	r3, [r7, #14]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	4608      	mov	r0, r1
 8008780:	4611      	mov	r1, r2
 8008782:	461a      	mov	r2, r3
 8008784:	4603      	mov	r3, r0
 8008786:	70fb      	strb	r3, [r7, #3]
 8008788:	460b      	mov	r3, r1
 800878a:	70bb      	strb	r3, [r7, #2]
 800878c:	4613      	mov	r3, r2
 800878e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800879e:	78bb      	ldrb	r3, [r7, #2]
 80087a0:	883a      	ldrh	r2, [r7, #0]
 80087a2:	78f9      	ldrb	r1, [r7, #3]
 80087a4:	f7fa fb66 	bl	8002e74 <HAL_PCD_EP_Open>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f91c 	bl	80089ec <USBD_Get_USB_Status>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fa fbaf 	bl	8002f44 <HAL_PCD_EP_Close>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f8fd 	bl	80089ec <USBD_Get_USB_Status>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f7fa fc87 	bl	8003132 <HAL_PCD_EP_SetStall>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f8de 	bl	80089ec <USBD_Get_USB_Status>
 8008830:	4603      	mov	r3, r0
 8008832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008834:	7bbb      	ldrb	r3, [r7, #14]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	4611      	mov	r1, r2
 800885c:	4618      	mov	r0, r3
 800885e:	f7fa fccc 	bl	80031fa <HAL_PCD_EP_ClrStall>
 8008862:	4603      	mov	r3, r0
 8008864:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f8bf 	bl	80089ec <USBD_Get_USB_Status>
 800886e:	4603      	mov	r3, r0
 8008870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008872:	7bbb      	ldrb	r3, [r7, #14]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800888e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008894:	2b00      	cmp	r3, #0
 8008896:	da0b      	bge.n	80088b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	4613      	mov	r3, r2
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	333e      	adds	r3, #62	; 0x3e
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	e00b      	b.n	80088c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088b6:	68f9      	ldr	r1, [r7, #12]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	1a9b      	subs	r3, r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80088c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fa fa99 	bl	8002e2a <HAL_PCD_SetAddress>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 f874 	bl	80089ec <USBD_Get_USB_Status>
 8008904:	4603      	mov	r3, r0
 8008906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008908:	7bbb      	ldrb	r3, [r7, #14]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	460b      	mov	r3, r1
 8008920:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008930:	7af9      	ldrb	r1, [r7, #11]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	f7fa fbb2 	bl	800309e <HAL_PCD_EP_Transmit>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f853 	bl	80089ec <USBD_Get_USB_Status>
 8008946:	4603      	mov	r3, r0
 8008948:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800894a:	7dbb      	ldrb	r3, [r7, #22]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	460b      	mov	r3, r1
 8008962:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008972:	7af9      	ldrb	r1, [r7, #11]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	f7fa fb2e 	bl	8002fd8 <HAL_PCD_EP_Receive>
 800897c:	4603      	mov	r3, r0
 800897e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 f832 	bl	80089ec <USBD_Get_USB_Status>
 8008988:	4603      	mov	r3, r0
 800898a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800898c:	7dbb      	ldrb	r3, [r7, #22]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089a8:	78fa      	ldrb	r2, [r7, #3]
 80089aa:	4611      	mov	r1, r2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fa fb5e 	bl	800306e <HAL_PCD_EP_GetRxCount>
 80089b2:	4603      	mov	r3, r0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089c4:	4b03      	ldr	r3, [pc, #12]	; (80089d4 <USBD_static_malloc+0x18>)
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	200001b4 	.word	0x200001b4

080089d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]

}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d817      	bhi.n	8008a30 <USBD_Get_USB_Status+0x44>
 8008a00:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <USBD_Get_USB_Status+0x1c>)
 8008a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a06:	bf00      	nop
 8008a08:	08008a19 	.word	0x08008a19
 8008a0c:	08008a1f 	.word	0x08008a1f
 8008a10:	08008a25 	.word	0x08008a25
 8008a14:	08008a2b 	.word	0x08008a2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a1c:	e00b      	b.n	8008a36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	73fb      	strb	r3, [r7, #15]
    break;
 8008a22:	e008      	b.n	8008a36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a24:	2301      	movs	r3, #1
 8008a26:	73fb      	strb	r3, [r7, #15]
    break;
 8008a28:	e005      	b.n	8008a36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2e:	e002      	b.n	8008a36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a30:	2303      	movs	r3, #3
 8008a32:	73fb      	strb	r3, [r7, #15]
    break;
 8008a34:	bf00      	nop
  }
  return usb_status;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <__libc_init_array>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	4d0d      	ldr	r5, [pc, #52]	; (8008a7c <__libc_init_array+0x38>)
 8008a48:	4c0d      	ldr	r4, [pc, #52]	; (8008a80 <__libc_init_array+0x3c>)
 8008a4a:	1b64      	subs	r4, r4, r5
 8008a4c:	10a4      	asrs	r4, r4, #2
 8008a4e:	2600      	movs	r6, #0
 8008a50:	42a6      	cmp	r6, r4
 8008a52:	d109      	bne.n	8008a68 <__libc_init_array+0x24>
 8008a54:	4d0b      	ldr	r5, [pc, #44]	; (8008a84 <__libc_init_array+0x40>)
 8008a56:	4c0c      	ldr	r4, [pc, #48]	; (8008a88 <__libc_init_array+0x44>)
 8008a58:	f000 f820 	bl	8008a9c <_init>
 8008a5c:	1b64      	subs	r4, r4, r5
 8008a5e:	10a4      	asrs	r4, r4, #2
 8008a60:	2600      	movs	r6, #0
 8008a62:	42a6      	cmp	r6, r4
 8008a64:	d105      	bne.n	8008a72 <__libc_init_array+0x2e>
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6c:	4798      	blx	r3
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7ee      	b.n	8008a50 <__libc_init_array+0xc>
 8008a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a76:	4798      	blx	r3
 8008a78:	3601      	adds	r6, #1
 8008a7a:	e7f2      	b.n	8008a62 <__libc_init_array+0x1e>
 8008a7c:	08008b14 	.word	0x08008b14
 8008a80:	08008b14 	.word	0x08008b14
 8008a84:	08008b14 	.word	0x08008b14
 8008a88:	08008b18 	.word	0x08008b18

08008a8c <memset>:
 8008a8c:	4402      	add	r2, r0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d100      	bne.n	8008a96 <memset+0xa>
 8008a94:	4770      	bx	lr
 8008a96:	f803 1b01 	strb.w	r1, [r3], #1
 8008a9a:	e7f9      	b.n	8008a90 <memset+0x4>

08008a9c <_init>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr

08008aa8 <_fini>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr
